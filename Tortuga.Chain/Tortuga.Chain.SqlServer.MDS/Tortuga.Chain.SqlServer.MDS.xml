<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tortuga.Chain.SqlServer.MDS</name>
    </assembly>
    <members>
        <member name="T:Tortuga.Chain.SqlServerDataSource">
            <summary>
            Class SqlServerDataSource.
            </summary>
            <seealso cref="T:Tortuga.Chain.SqlServer.SqlServerDataSourceBase" />
        </member>
        <member name="F:Tortuga.Chain.SqlServerDataSource.m_ServerDefaultSettings">
            <summary>
            This is used to decide which option overrides to set when establishing a connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.#ctor(System.String,System.String,Tortuga.Chain.SqlServer.SqlServerDataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServerDataSource" /> class.
            </summary>
            <param name="name">Name of the data source.</param>
            <param name="connectionString">The connection string.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentException">connectionString is null or empty.;connectionString</exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.#ctor(System.String,Tortuga.Chain.SqlServer.SqlServerDataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServerDataSource" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentException">connectionString is null or empty.;connectionString</exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.#ctor(System.String,Microsoft.Data.SqlClient.SqlConnectionStringBuilder,Tortuga.Chain.SqlServer.SqlServerDataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServerDataSource" /> class.
            </summary>
            <param name="name">Optional name of the data source.</param>
            <param name="connectionStringBuilder">The connection string builder.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentNullException">connectionStringBuilder;connectionStringBuilder is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.#ctor(Microsoft.Data.SqlClient.SqlConnectionStringBuilder,Tortuga.Chain.SqlServer.SqlServerDataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServerDataSource"/> class.
            </summary>
            <param name="connectionStringBuilder">The connection string builder.</param>
            <param name="settings">Optional settings object.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.ArithAbort">
            <summary>
            Terminates a query when an overflow or divide-by-zero error occurs during query execution.
            </summary>
            <remarks>Microsoft recommends setting ArithAbort=On for all connections. To avoid an additional round-trip to the server, do this at the server level instead of at the connection level.</remarks>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.DatabaseMetadata">
            <summary>
            This object can be used to lookup database information.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.IsSqlDependencyActive">
            <summary>
            Gets a value indicating whether SQL dependency support is active for this dispatcher.
            </summary>
            <value><c>true</c> if this SQL dependency is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.XactAbort">
            <summary>
            Rolls back a transaction if a Transact-SQL statement raises a run-time error.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.BeginTransaction(System.String,System.Nullable{System.Data.IsolationLevel},System.Boolean)">
            <summary>
            Creates a new transaction
            </summary>
            <param name="transactionName">optional name of the transaction.</param>
            <param name="isolationLevel">the isolation level. if not supplied, will use the database default.</param>
            <param name="forwardEvents">if true, logging events are forwarded to the parent connection.</param>
            <returns></returns>
            <remarks>
            the caller of this function is responsible for closing the transaction.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.BeginTransactionAsync(System.String,System.Nullable{System.Data.IsolationLevel},System.Boolean)">
            <summary>
            Creates a new transaction
            </summary>
            <param name="transactionName">Name of the transaction.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="forwardEvents">if set to <c>true</c> [forward events].</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.GetEffectiveSettings">
            <summary>
            Gets the options that are currently in effect. This takes into account server-defined defaults.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.GetEffectiveSettingsAsync">
            <summary>
            Gets the options that are currently in effect. This takes into account server-defined defaults.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.StartSqlDependency">
            <summary>
            Starts SQL dependency on this connection string.
            </summary>
            <remarks>
            true if the listener initialized successfully; false if a compatible listener
            already exists.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.StopSqlDependency">
            <summary>
            Stops SQL dependency on this connection string.
            </summary>
            <remarks>
            true if the listener was completely stopped; false if the System.AppDomain
            was unbound from the listener, but there are is at least one other System.AppDomain
            using the same listener.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.TestConnectionAsync">
            <summary>
            Tests the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.CreateConnection">
            <summary>
            Creates and opens a SQL connection.
            </summary>
            <returns></returns>
            <remarks>The caller of this method is responsible for closing the connection.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.Execute(Tortuga.Chain.Core.CommandExecutionToken{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.Core.CommandImplementation{Microsoft.Data.SqlClient.SqlCommand},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="state">User supplied state.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.Execute(Tortuga.Chain.Core.OperationExecutionToken{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},Tortuga.Chain.Core.OperationImplementation{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.ExecuteAsync(Tortuga.Chain.Core.OperationExecutionToken{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},Tortuga.Chain.Core.OperationImplementationAsync{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.ExecuteAsync(Tortuga.Chain.Core.CommandExecutionToken{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.Core.CommandImplementationAsync{Microsoft.Data.SqlClient.SqlCommand},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User supplied state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.CreateConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Creates and opens a SQL connection.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <remarks>
            The caller of this method is responsible for closing the connection.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.WithSettings(Tortuga.Chain.SqlServer.SqlServerDataSourceSettings)">
            <summary>
            Creates a new data source with the indicated changes to the settings.
            </summary>
            <param name="settings">The new settings to use.</param>
            <returns></returns>
            <remarks>The new data source will share the same database metadata cache.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.WithRules(Tortuga.Chain.AuditRules.AuditRule[])">
            <summary>
            Creates a new data source with additional audit rules.
            </summary>
            <param name="additionalRules">The additional rules.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.WithRules(System.Collections.Generic.IEnumerable{Tortuga.Chain.AuditRules.AuditRule})">
            <summary>
            Creates a new data source with additional audit rules.
            </summary>
            <param name="additionalRules">The additional rules.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.WithUser(System.Object)">
            <summary>
            Creates a new data source with the indicated user.
            </summary>
            <param name="userValue">The user value.</param>
            <returns></returns>
            <remarks>
            This is used in conjunction with audit rules.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.WithCache(Tortuga.Chain.Core.ICacheAdapter)">
            <summary>
            Craetes a new data source with the provided cache.
            </summary>
            <param name="cache">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServerDataSource.CreateOpenDataSource(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates an open data source using the supplied connection and optional transaction.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <returns>SqlServerOpenDataSource.</returns>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.Cache">
            <summary>
            Gets or sets the cache to be used by this data source. The default is .NET's System.Runtime.Caching.MemoryCache.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServerDataSource.ExtensionCache">
            <summary>
            The extension cache is used by extensions to store data source specific information.
            </summary>
            <value>
            The extension cache.
            </value>
        </member>
        <member name="T:Tortuga.Chain.SqlServerExtensions">
            <summary>
            Class SqlServerExtensions.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServerExtensions.AsDataSource(Microsoft.Data.SqlClient.SqlConnection)">
            <summary>
            Returns a data source wrapped around the connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns>SqlServerOpenDataSource.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServerExtensions.AsDataSource(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Returns a data source wrapped around the transaction.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <returns>SqlServerOpenDataSource.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Tortuga.Chain.SqlServerLimitOption">
            <summary>
            Limit options supported by SQL Server.
            </summary>
            <remarks>This is a strict subset of LimitOptions</remarks>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.None">
            <summary>
            No limits were applied.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.Rows">
            <summary>
            Uses OFFSET/FETCH
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.Percentage">
            <summary>
            Uses TOP (N) PERCENT
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.RowsWithTies">
            <summary>
            Uses TOP (N) WITH TIES
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.PercentageWithTies">
            <summary>
            Uses TOP (N) PERCENT WITH TIES
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.TableSampleSystemRows">
            <summary>
            Uses TABLESAMPLE SYSTEM (N ROWS)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServerLimitOption.TableSampleSystemPercentage">
            <summary>
            Uses TABLESAMPLE SYSTEM (N PERCENT)
            </summary>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.AbstractSqlServerMetadataCache">
            <summary>Class AbstractSqlServerMetadataCache.</summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.AbstractSqlServerMetadataCache.GetTableOrView(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the metadata for a table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerMetadataCache">
            <summary>
            Class SqlServerMetadataCache.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetScalarFunction(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the metadata for a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <returns>Null if the object could not be found.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetScalarFunctions">
            <summary>
            Gets the scalar functions that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>
            Call Preload before invoking this method to ensure that all scalar functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetStoredProcedure(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the stored procedure's metadata.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns>Null if the object could not be found.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetStoredProcedures">
            <summary>
            Gets the stored procedures that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>
            Call Preload before invoking this method to ensure that all stored procedures were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetTableFunction(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the metadata for a table function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <returns>Null if the object could not be found.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetTableFunctions">
            <summary>
            Gets the table-valued functions that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>
            Call Preload before invoking this method to ensure that all table-valued functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetTableOrViewFromClass``1">
            <summary>
            Returns the table or view derived from the class's name and/or Table attribute.
            </summary>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetTablesAndViews">
            <summary>
            Gets the tables and views that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>
            Call Preload before invoking this method to ensure that all tables and views were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetUserDefinedTableType(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the metadata for a user defined type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>UserDefinedTableTypeMetadata&lt;SqlServerObjectName, SqlDbType&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetUserDefinedTableTypes">
            <summary>
            Gets the table-valued functions that were loaded by this cache.
            </summary>
            <returns>ICollection&lt;UserDefinedTableTypeMetadata&lt;SqlServerObjectName, SqlDbType&gt;&gt;.</returns>
            <remarks>Call Preload before invoking this method to ensure that all table-valued functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.Preload">
            <summary>
            Preloads all of the metadata for this data source.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.Reset">
            <summary>
            Resets the metadata cache, clearing out all cached metadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.ParseObjectName(System.String)">
            <summary>
            Parse a string and return the database specific representation of the object name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerMetadataCache.MaxParameters">
            <summary>
            Gets the maximum number of parameters in a single SQL batch.
            </summary>
            <value>The maximum number of parameters.</value>
            <remarks>Note that the documentation says 2100, but you need to subtract one for the SQL statement itself. https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server?view=sql-server-ver15</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.#ctor(Microsoft.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerMetadataCache"/> class.
            </summary>
            <param name="connectionBuilder">The connection builder.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerMetadataCache.DatabaseName">
            <summary>
            Returns the current database.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerMetadataCache.DefaultSchema">
            <summary>
            Returns the user's default schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetIndexesForTable(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the indexes for a table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Indexes are not supported by this data source</exception>
            <remarks>
            This should be cached on a TableOrViewMetadata object.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.GetTableOrView(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Gets the detailed metadata for a table or view.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>SqlServerTableOrViewMetadata&lt;TDbType&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.PreloadScalarFunctions">
            <summary>
            Preloads the scalar functions.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.PreloadStoredProcedures">
            <summary>
            Preloads the stored procedures.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.PreloadTableFunctions">
            <summary>
            Preloads the table value functions.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.PreloadTables">
            <summary>
            Preloads metadata for all tables.
            </summary>
            <remarks>This is normally used only for testing. By default, metadata is loaded as needed.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.PreloadUserDefinedTableTypes">
            <summary>
            Preloads the user defined types.
            </summary>
            <remarks>This is normally used only for testing. By default, metadata is loaded as needed.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.PreloadViews">
            <summary>
            Preloads metadata for all views.
            </summary>
            <remarks>This is normally used only for testing. By default, metadata is loaded as needed.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.ValueToSqlValue(System.Object,System.Nullable{System.Data.SqlDbType})">
            <summary>
            Converts a value to a string suitable for use in a SQL statement.
            </summary>
            <param name="value">The value.</param>
            <param name="dbType">Optional database column type.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.SqlTypeNameToDbType(System.String,System.Nullable{System.Boolean})">
            <summary>
            Determines the database column type from the column type name.
            </summary>
            <param name="typeName">Name of the database column type.</param>
            <param name="isUnsigned">NOT USED</param>
            <returns></returns>
            <remarks>This does not honor registered types. This is only used for the database's hard-coded list of native types.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.ToClrType(System.Data.SqlDbType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Returns the CLR type that matches the indicated database column type.
            </summary>
            <param name="dbType">Type of the database column.</param>
            <param name="isNullable">If nullable, Nullable versions of primitive types are returned.</param>
            <param name="maxLength">Optional length. Used to distinguish between a char and string. Defaults to string.</param>
            <returns>
            A CLR type or NULL if the type is unknown.
            </returns>
            <remarks>This does not take into consideration registered types.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerMetadataCache.SqlServerIndexColumnMetadata.#ctor(Tortuga.Chain.Metadata.ColumnMetadata{System.Data.SqlDbType},System.Nullable{System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the IndexColumnMetadata class.
            </summary>
            <param name="column">The underlying column details.</param>
            <param name="isDescending">Indicates the column is indexed in descending order.</param>
            <param name="isIncluded">Indicates the column is an unindexed, included column.</param>
            <param name="indexId"></param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.Appenders.NotifyChangeAppender`1.#ctor(Tortuga.Chain.ILink{`0},Microsoft.Data.SqlClient.OnChangeEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.Appender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="eventHandler">The event handler to fire when then associated SQL Dependency is fired..</param>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.ISupportsChangeListener">
            <summary>
            This is applied to command builders that support SqlDependency operations.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.ISupportsChangeListener.WaitForChange(System.Threading.CancellationToken,System.Object)">
            <summary>
            Waits for change in the data that is returned by this operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task that can be waited for.</returns>
            <remarks>This requires the use of SQL Dependency</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.ISupportsChangeListener.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany">
            <summary>
            Class SqlServerDeleteWithFilter.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.DeleteOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
            <param name="parameters">The parameters.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteMany.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteObject`1">
            <summary>
            Class SqlServerDeleteObject.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteObject`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,`0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteObject`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerDeleteObject`1.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBatch`1">
            <summary>
            Class SqlServerInsertBatchTable is when using a values clause with an array of rows.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBatch`1.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBatch`1.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBatchTable">
            <summary>
            Class SqlServerInsertBatchTable is when a table-type parameter is provided.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBatchTable.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBatchTable.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk">
            <summary>
            This class is used to perform bulk inserts
            </summary>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2" />
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.Prepare">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.WithBatchSize(System.Int32)">
            <summary>
            Modifies the batch size.
            </summary>
            <param name="batchSize">Size of the batch.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.WithNotifications(Microsoft.Data.SqlClient.SqlRowsCopiedEventHandler,System.Int32)">
            <summary>
            After every [notifyAfter] records, the event handler will be fired.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="notifyAfter">The notify after.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.WithStreaming">
            <summary>
            Enables streaming.
            </summary>
            <returns>SqlServerInsertBulk.</returns>
            <remarks>When EnableStreaming is true, SqlBulkCopy reads from an IDataReader object using SequentialAccess, optimizing memory usage by using the IDataReader streaming capabilities. When it’s set to false, the SqlBulkCopy class loads all the data returned by the IDataReader object into memory before sending it to SQL Server or SQL Azure.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.Implementation(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Implementation the specified operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertBulk.ImplementationAsync(Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction,System.Threading.CancellationToken)">
            <summary>
            Implementation the specified operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertObject`1">
            <summary>
            Class SqlServerInsertObject.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertObject`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,`0,Tortuga.Chain.InsertOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertObject`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertObject`1.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertOrUpdateObject`1">
            <summary>
            Class SqlServerInsertOrUpdateObject.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertOrUpdateObject`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,`0,Tortuga.Chain.UpsertOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertOrUpdateObject`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerInsertOrUpdateObject`1.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerObjectCommand`1">
            <summary>
            Class SqlServerObjectCommand.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerObjectCommand`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerObjectCommand`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerObjectCommand`1.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerObjectCommand`1.Table">
            <summary>
            Gets the table metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerObjectCommand`1.OnGetTable">
            <summary>
            Called when ObjectDbCommandBuilder needs a reference to the associated table or view.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall">
            <summary>
            Class SqlServerProcedureCall.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="procedureName">Name of the procedure.</param>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerProcedureCall.WaitForChange(System.Threading.CancellationToken,System.Object)">
            <summary>
            Waits for change in the data that is returned by this operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task that can be waited for.</returns>
            <remarks>This requires the use of SQL Dependency</remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerScalarFunction">
            <summary>
            Use for scalar functions.
            </summary>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2" />
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerScalarFunction.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <param name="functionArgumentValue">The function argument.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerScalarFunction.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>
            ExecutionToken&lt;TCommand&gt;.
            </returns>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerScalarFunction.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerScalarFunction.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>ColumnMetadata.</returns>
            <remarks>Always returns null since this command builder has no columns</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerScalarFunction.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall">
            <summary>
            Class SqlServerSqlCall.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="argumentValue">The argument value.</param>
            <exception cref="T:System.ArgumentException">sqlStatement is null or empty.;sqlStatement</exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerSqlCall.WaitForChange(System.Threading.CancellationToken,System.Object)">
            <summary>
            Waits for change in the data that is returned by this operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task that can be waited for.</returns>
            <remarks>This requires the use of SQL Dependency</remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction">
            <summary>
            Use for table-valued functions.
            </summary>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3" />
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableFunctionName">Name of the table function.</param>
            <param name="functionArgumentValue">The function argument.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.OnWithSorting(System.Collections.Generic.IEnumerable{Tortuga.Chain.SortExpression})">
            <summary>
            Adds sorting to the command builder.
            </summary>
            <param name="sortExpressions">The sort expressions.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.OnWithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32},Tortuga.Chain.SqlServerLimitOption,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.OnWithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32},Tortuga.Chain.LimitOptions,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.OnWithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns>TableDbCommandBuilder&lt;SqlCommand, SqlParameter, SqlServerLimitOption&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.OnWithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>
            ExecutionToken&lt;TCommand&gt;.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.AsCount">
            <summary>
            Returns the row count using a <c>SELECT Count(*)</c> style query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.AsCount(System.String,System.Boolean)">
            <summary>
            Returns the row count for a given column. <c>SELECT Count(columnName)</c>
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="distinct">if set to <c>true</c> use <c>SELECT COUNT(DISTINCT columnName)</c>.</param>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableFunction.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1">
            <summary>
            SqlServerTableOrView supports queries against tables and views.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.OnWithSorting(System.Collections.Generic.IEnumerable{Tortuga.Chain.SortExpression})">
            <summary>
            Adds sorting to the command builder.
            </summary>
            <param name="sortExpressions">The sort expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.OnWithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32},Tortuga.Chain.SqlServerLimitOption,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.OnWithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32},Tortuga.Chain.LimitOptions,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.OnWithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns>TableDbCommandBuilder&lt;SqlCommand, SqlParameter, SqlServerLimitOption&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.OnWithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.AsCount">
            <summary>
            Returns the row count using a <c>SELECT COUNT_BIG(*)</c> style query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.AsCount(System.String,System.Boolean)">
            <summary>
            Returns the row count for a given column. <c>SELECT COUNT_BIG(columnName)</c>
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="distinct">if set to <c>true</c> use <c>SELECT COUNT_BIG(DISTINCT columnName)</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerTableOrView`1.WaitForChange(System.Threading.CancellationToken,System.Object)">
            <summary>
            Waits for change in the data that is returned by this operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task that can be waited for.</returns>
            <remarks>This requires the use of SQL Dependency</remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany">
            <summary>
            Class SqlServerUpdateMany.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.SqlClient.SqlParameter},System.Nullable{System.Int32},Tortuga.Chain.UpdateOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values.</param>
            <param name="whereClause">The where clause.</param>
            <param name="parameters">The parameters.</param>
            <param name="expectedRowCount">The expected row count.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.NotSupportedException">Cannot use Key attributes with this operation.</exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="updateArgumentValue">The update argument value.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.NotSupportedException">Cannot use Key attributes with this operation.</exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.All">
            <summary>
            Applies this command to all rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.WithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.WithFilter(System.String)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateMany.WithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateObject`1">
            <summary>
            Class SqlServerUpdateObject.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateObject`1.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceBase,Tortuga.Chain.SqlServer.SqlServerObjectName,`0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateObject`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.CommandBuilders.SqlServerUpdateObject`1.Prepare(Tortuga.Chain.Materializers.Materializer{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.Materializers.WaitForChangeMaterializer`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.Materializer`2"/> class.
            </summary>
            <param name="commandBuilder">The associated command builder.</param>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerAppenders">
            <summary>
            Class SqlServerAppenders.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerAppenders.WithChangeNotification``1(Tortuga.Chain.ILink{``0},Microsoft.Data.SqlClient.OnChangeEventHandler)">
            <summary>
            Attaches a SQL Server dependency change listener to this operation.
            </summary>
            <typeparam name="TResult">The type of the t result type.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="eventHandler">The event handler to fire when the underlying data changes.</param>
            <returns>Tortuga.Chain.Core.ILink&lt;TResult&gt;.</returns>
            <remarks>This will only work for operations against non-transactional SQL Server data sources that also comform to the rules about using SQL Dependency.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerAppenders.AutoInvalidate``1(Tortuga.Chain.ICacheLink{``0})">
            <summary>
            Attaches a SQL Server dependency change listener to this operation that will automatically invalidate the cache.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="previousLink">The previous link.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerCommandExecutionToken">
            <summary>
            An execution token specific to Sql Server.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerCommandExecutionToken.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.CommandExecutionToken`2"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationName">Name of the operation. This is used for logging.</param>
            <param name="commandText">The SQL to be executed.</param>
            <param name="parameters">The parameters.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerCommandExecutionToken.AddChangeListener(Microsoft.Data.SqlClient.OnChangeEventHandler)">
            <summary>
            Adds a SQL Dependency based change listener.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <remarks>This requires SQL Dependency to be active.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerCommandExecutionToken.OnBuildCommand(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            Subclasses can override this method to change the command object after the command text and parameters are loaded.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerDataSourceBase">
            <summary>
            Class SqlServerDataSourceBase.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKeyList``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Collections.Generic.IEnumerable{``0},Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete multiple rows by key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <param name="options">Update options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Data.DataTable,Tortuga.Chain.SqlServer.SqlServerObjectName,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="dataTable">The data table.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Data.Common.DbDataReader,Tortuga.Chain.SqlServer.SqlServerObjectName,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="dataReader">The data reader.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Collections.Generic.IEnumerable{``0},Tortuga.Chain.SqlServer.SqlServerObjectName,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},Tortuga.Chain.SqlServer.SqlServerObjectName,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation..
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>
            MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Data.DataTable,Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataTable">The data table.</param>
            <param name="options">The options.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Data.IDataReader,Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataReader">The data reader.</param>
            <param name="options">The options.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Collections.Generic.IEnumerable{``0},Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk``1(System.Data.DataTable,Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="dataTable">The data table.</param>
            <param name="options">The options.</param>
            <returns>
            SqlServerInsertBulk.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk``1(System.Data.IDataReader,Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="dataReader">The data reader.</param>
            <param name="options">The options.</param>
            <returns>
            SqlServerInsertBulk.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk``1(System.Collections.Generic.IEnumerable{``0},Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>
            SqlServerInsertBulk.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKeyList``2(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,System.Collections.Generic.IEnumerable{``1},Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple rows by key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="keys">The keys.</param>
            <param name="options">Update options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch(System.String,System.Data.DataTable,System.String,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="dataTable">The data table.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch(System.String,System.Data.Common.DbDataReader,System.String,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="dataReader">The data reader.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation..
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},System.String,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation..
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="tableTypeName">Name of the table type.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>
            MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk(System.String,System.Data.DataTable,Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataTable">The data table.</param>
            <param name="options">The options.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk(System.String,System.Data.IDataReader,Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataReader">The data reader.</param>
            <param name="options">The options.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBulk``1(System.String,System.Collections.Generic.IEnumerable{``0},Microsoft.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts the batch of records using bulk insert.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>SqlServerInsertBulk.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.#ctor(Tortuga.Chain.SqlServer.SqlServerDataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerDataSourceBase"/> class.
            </summary>
            <param name="settings">Optional settings value.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DatabaseMetadata">
            <summary>
            Gets the database metadata.
            </summary>
            <value>The database metadata.</value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.OnGetDatabaseMetadata">
            <summary>
            Called when Database.DatabaseMetadata is invoked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertMultipleBatch``1(System.String,System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.InsertOptions)">
            <summary>
            Performs a series of batch inserts.
            </summary>
            <typeparam name="TObject">The type of the t object.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>Tortuga.Chain.ILink&lt;System.Int32&gt;.</returns>
            <remarks>This operation is not atomic. It should be wrapped in a transaction.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertMultipleBatch``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.InsertOptions)">
            <summary>
            Performs a series of batch inserts.
            </summary>
            <typeparam name="TObject">The type of the t object.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>Tortuga.Chain.ILink&lt;System.Int32&gt;.</returns>
            <remarks>This operation is not atomic. It should be wrapped in a transaction.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertMultipleBatch``1(System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="objects">The objects to insert.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="objects">The objects to insert.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="objects">The objects to insert.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.InsertBatch``1(System.String,System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts the batch of records as one operation..
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="objects">The objects.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Sql(System.String)">
            <summary>
            Creates a operation based on a raw SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Sql(System.String,System.Object)">
            <summary>
            Creates a operation based on a raw SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="argumentValue">The argument value.</param>
            <returns>SqlServerSqlCall.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Delete``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Creates a command to perform a delete operation.
            </summary>
            <param name="tableName"></param>
            <param name="argumentValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Delete``1(``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete an object model from the table indicated by the class's Table attribute.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The delete options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKey``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete a record by its primary key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKey(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete a record by its primary key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String)">
            <summary>
            Delete multiple records using a where expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Update``1(``0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update an object in the specified table.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The update options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKey``2(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,``1,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Creates an operation to directly query a table or view
            </summary>
            <param name="tableOrViewName"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String)">
            <summary>
            Creates an operation to directly query a table or view
            </summary>
            <param name="tableOrViewName"></param>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Object)">
            <summary>
            Creates an operation to directly query a table or view
            </summary>
            <param name="tableOrViewName"></param>
            <param name="whereClause"></param>
            <param name="argumentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Creates an operation to directly query a table or view
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns>TableDbCommandBuilder&lt;AbstractCommand, AbstractParameter, AbstractLimitOption&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From``1">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From``1(System.String)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From``1(System.String,System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <param name="argumentValue">Optional argument value. Every property in the argument value must have a matching parameter in the WHERE clause</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From``1(System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="filterValue">The filter value is used to generate a simple AND style WHERE clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Delete multiple records using a filter object.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Object)">
            <summary>
            Delete multiple records using a where expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value for the where clause.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="updateArgumentValue">The argument value.</param>
            <param name="options">The update options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update value.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="options">The options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKey``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0)">
            <summary>
            Gets a record by its primary key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;OleDbCommand, OleDbParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKey(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String)">
            <summary>
            Gets a record by its primary key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;OleDbCommand, OleDbParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Insert``1(``0,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts an object into the specified table.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert occurs.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Update``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Creates a operation used to perform an update operation.
            </summary>
            <param name="tableName"></param>
            <param name="argumentValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKey``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,System.String,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;OleDbCommand, OleDbParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Insert``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,Tortuga.Chain.InsertOptions)">
            <summary>
            Creates an operation used to perform an insert operation.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="options">The update options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKeyList``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a set of records by their primary key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
            <remarks>This only works on tables that have a scalar primary key.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKeyList``1(Tortuga.Chain.SqlServer.SqlServerObjectName,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a set of records by an unique key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keyColumn">Name of the key column. This should be a primary or unique key, but that's not enforced.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
            <remarks>This only works on tables that have a scalar primary key.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Upsert``1(Tortuga.Chain.SqlServer.SqlServerObjectName,``0,Tortuga.Chain.UpsertOptions)">
            <summary>
            Creates a operation used to perform an "upsert" operation.
            </summary>
            <param name="tableName"></param>
            <param name="argumentValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Upsert``1(``0,Tortuga.Chain.UpsertOptions)">
            <summary>
            Perform an insert or update operation as appropriate.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert/update occurs.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Delete``1(System.String,``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Inserts an object model from the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The delete options.</param>
            <returns>SqlServerInsert.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Delete``1(System.String,``0)">
            <summary>
            Inserts an object model from the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <returns>SqlServerInsert.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKey``1(System.String,``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete a record by its primary key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKey(System.String,System.String,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete a record by its primary key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKey``1(System.String,``0)">
            <summary>
            Delete a record by its primary key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKey(System.String,System.String)">
            <summary>
            Delete a record by its primary key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKeyList``1(System.String,System.Collections.Generic.IEnumerable{``0},Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete multiple rows by key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <param name="options">Update options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteByKeyList``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Delete multiple rows by key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(System.String,System.String)">
            <summary>
            Delete multiple records using a where expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(System.String,System.String,System.Object)">
            <summary>
            Delete multiple records using a where expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value for the where clause.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(System.String,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Delete multiple records using a filter object.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The options.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.DeleteWithFilter(System.String,System.Object)">
            <summary>
            Delete multiple records using a filter object.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="filterValue">The filter value.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(System.String)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(System.String,System.String)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <returns>SqlServerTableOrView.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(System.String,System.String,System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <param name="argumentValue">Optional argument value. Every property in the argument value must have a matching parameter in the WHERE clause</param>
            <returns>SqlServerTableOrView.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(System.String,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="filterValue">The filter value is used to generate a simple AND style WHERE clause.</param>
            <param name="filterOptions">The filter options.</param>
            <returns>SqlServerTableOrView.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.From(System.String,System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="filterValue">The filter value is used to generate a simple AND style WHERE clause.</param>
            <returns>SqlServerTableOrView.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKey``1(System.String,``0)">
            <summary>
            Gets a record by its primary key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKey(System.String,System.String)">
            <summary>
            Gets a record by its primary key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKeyList``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Gets a set of records by an unique key.</summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keyColumn">Name of the key column. This should be a primary or unique key, but that's not enforced.</param>
            <param name="keys">The keys.</param>
            <returns>MultipleRowDbCommandBuilder&lt;MyAbstractCommand, MyAbstractParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.GetByKeyList``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a set of records by their primary key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <returns>MultipleRowDbCommandBuilder&lt;MyAbstractCommand, MyAbstractParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Insert``1(System.String,``0,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts an object into the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options.</param>
            <returns>
            SqlServerInsert.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Insert``1(System.String,``0)">
            <summary>
            Inserts an object into the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <returns>
            SqlServerInsert.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Update``1(System.String,``0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update an object in the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The update options.</param>
            <returns>SqlServerInsert.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Update``1(System.String,``0)">
            <summary>
            Update an object in the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <returns>SqlServerInsert.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKey``2(System.String,``0,``1,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKey``1(System.String,``0,System.String,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKey``2(System.String,``0,``1)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKey``1(System.String,``0,System.String)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKeyList``2(System.String,``0,System.Collections.Generic.IEnumerable{``1},Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple rows by key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="keys">The keys.</param>
            <param name="options">Update options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateByKeyList``2(System.String,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Update multiple rows by key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="keys">The keys.</param>
            <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(System.String,System.String,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="options">The update options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(System.String,System.String,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="updateArgumentValue">The argument value.</param>
            <param name="options">The update options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(System.String,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update value.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="options">The options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(System.String,System.String)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(System.String,System.String,System.Object)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="updateArgumentValue">The argument value.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.UpdateSet(System.String,System.Object)">
            <summary>
            Update multiple records using an update value.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Upsert``1(System.String,``0,Tortuga.Chain.UpsertOptions)">
            <summary>
            Perform an insert or update operation as appropriate.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert/update occurs.</param>
            <returns>SqlServerUpdate.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Upsert``1(System.String,``0)">
            <summary>
            Perform an insert or update operation as appropriate.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <returns>SqlServerUpdate.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Procedure(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Loads a procedure definition
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Procedure(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object)">
            <summary>
            Loads a procedure definition and populates it using the parameter object.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
            <remarks>
            The procedure's definition is loaded from the database and used to determine which properties on the parameter object to use.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.ScalarFunction(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            This is used to query a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.ScalarFunction(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object)">
            <summary>
            This is used to query a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <param name="functionArgumentValue">The function argument.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.TableFunction(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            This is used to query a table valued function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.TableFunction(Tortuga.Chain.SqlServer.SqlServerObjectName,System.Object)">
            <summary>
            This is used to query a table valued function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <param name="functionArgumentValue">The function argument.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Procedure(System.String)">
            <summary>
            Loads a procedure definition
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.Procedure(System.String,System.Object)">
            <summary>
            Loads a procedure definition and populates it using the parameter object.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
            <remarks>
            The procedure's definition is loaded from the database and used to determine which properties on the parameter object to use.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.ScalarFunction(System.String)">
            <summary>
            This is used to query a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.ScalarFunction(System.String,System.Object)">
            <summary>
            This is used to query a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <param name="functionArgumentValue">The function argument.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.TableFunction(System.String)">
            <summary>
            This is used to query a table valued function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceBase.TableFunction(System.String,System.Object)">
            <summary>
            This is used to query a table valued function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <param name="functionArgumentValue">The function argument.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerDataSourceSettings">
            <summary>
            This allows overriding connection options.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerDataSourceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerDataSourceSettings"/> class.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerDataSourceSettings.ArithAbort">
            <summary>
            Terminates a query when an overflow or divide-by-zero error occurs during query execution.
            </summary>
            <remarks>Microsoft recommends setting ArithAbort=On for all connections. To avoid an additional round-trip to the server, do this at the server level instead of at the connection level.</remarks>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerDataSourceSettings.XactAbort">
            <summary>
            Rolls back a transaction if a Transact-SQL statement raises a run-time error.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings">
            <summary>
            This contains the connection options that are currently in effect.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.AnsiNullDefaultOff">
            <summary>
            ANSI_NULL_DFLT_OFF. Alters the session's behavior not to use ANSI compatibility for nullability. New columns defined without explicit nullability do not allow nulls.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.AnsiNullDefaultOn">
            <summary>
            ANSI_NULL_DFLT_ON. Alters the session's behavior to use ANSI compatibility for nullability. New columns defined without explicit nullability are defined to allow nulls.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.AnsiNulls">
            <summary>
            ANSI_NULLS. Controls NULL handling when using equality operators.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.AnsiPadding">
            <summary>
            ANSI_PADDING. Controls padding of fixed-length variables.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.AnsiWarning">
            <summary>
            ANSI_WARNINGS. Controls truncation and NULL in aggregate warnings.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.ArithAbort">
            <summary>
            ARITHABORT. Terminates a query when an overflow or divide-by-zero error occurs during query execution.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.ArithIgnore">
            <summary>
            ARITHIGNORE. Returns NULL when an overflow or divide-by-zero error occurs during a query.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.ConcatNullYieldsNull">
            <summary>
            CONCAT_NULL_YIELDS_NULL. Returns NULL when concatenating a NULL value with a string.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.CursorCloseOnCommit">
            <summary>
            CURSOR_CLOSE_ON_COMMIT. Controls behavior of cursors after a commit operation has been performed.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.DisableDeferredConstraintChecking">
            <summary>
            DISABLE_DEF_CNST_CHK. Controls interim or deferred constraint checking.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.NoCount">
            <summary>
            NOCOUNT. Turns off the message returned at the end of each statement that states how many rows were affected.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.NumericRoundAbort">
            <summary>
            NUMERIC_ROUNDABORT. Generates an error when a loss of precision occurs in an expression.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.QuotedIdentifier">
            <summary>
            QUOTED_IDENTIFIER. Differentiates between single and double quotation marks when evaluating an expression.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerEffectiveSettings.XactAbort">
            <summary>
            XACT_ABORT. Rolls back a transaction if a Transact-SQL statement raises a run-time error.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerObjectName">
            <summary>
            Represents an object in SQL Server (e.g. table, view, procedure)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SqlServer.SqlServerObjectName.Empty">
            <summary>
            An empty schema/name pair
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerObjectName"/> struct.
            </summary>
            <param name="schema">The schema.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerObjectName" /> struct.
            </summary>
            <param name="database">The database.</param>
            <param name="schema">The schema.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerObjectName"/> struct.
            </summary>
            <param name="schemaAndName">Name of the schema and.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerObjectName.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerObjectName.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerObjectName.Schema">
            <summary>
            Gets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.op_Implicit(System.String)~Tortuga.Chain.SqlServer.SqlServerObjectName">
            <summary>
            Perform an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Tortuga.Chain.SqlServer.SqlServerObjectName"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.op_Inequality(Tortuga.Chain.SqlServer.SqlServerObjectName,Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>
            The result of the operator.
            </returns>
            <remarks>This is a case-insensitive comparison.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.op_Equality(Tortuga.Chain.SqlServer.SqlServerObjectName,Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>
            The result of the operator.
            </returns>
            <remarks>This is a case-insensitive comparison.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>This is a case-insensitive comparison.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.Equals(Tortuga.Chain.SqlServer.SqlServerObjectName)">
            <summary>
            Returns true if the two objects are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <remarks>This is a case-insensitive comparison.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
            <remarks>This is a case-insensitive comparison.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.ToQuotedString">
            <summary>
            To the quoted string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerObjectName.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerOpenDataSource">
            <summary>
            Class SqlServerOpenDataSource.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.AssociatedConnection">
            <summary>
            Returns the associated connection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.AssociatedTransaction">
            <summary>
            Returns the associated transaction.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.Cache">
            <summary>
            Gets or sets the cache to be used by this data source. The default is .NET's System.Runtime.Caching.MemoryCache.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.DatabaseMetadata">
            <summary>
            Gets the database metadata.
            </summary>
            <value>The database metadata.</value>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.ExtensionCache">
            <summary>
            The extension cache is used by extensions to store data source specific information.
            </summary>
            <value>
            The extension cache.
            </value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.Close">
            <summary>
            Closes the connection and transaction associated with this data source.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.GetExtensionData``1">
            <summary>
            Gets the extension data.
            </summary>
            <typeparam name="TTKey">The type of extension data desired.</typeparam>
            <returns>T.</returns>
            <remarks>Chain extensions can use this to store data source specific data. The key should be a data type defined by the extension.
            Transactional data sources should override this method and return the value held by their parent data source.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.TestConnectionAsync">
            <summary>
            Tests the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.TryCommit">
            <summary>
            Tries the commit the transaction associated with this data source.
            </summary>
            <returns>
            True if there was an open transaction associated with this data source, otherwise false.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.WithRules(Tortuga.Chain.AuditRules.AuditRule[])">
            <summary>
            Modifies this data source with additional audit rules.
            </summary>
            <param name="additionalRules">The additional rules.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.WithRules(System.Collections.Generic.IEnumerable{Tortuga.Chain.AuditRules.AuditRule})">
            <summary>
            Modifies this data source with additional audit rules.
            </summary>
            <param name="additionalRules">The additional rules.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.WithUser(System.Object)">
            <summary>
            Modifies this data source to include the indicated user.
            </summary>
            <param name="userValue">The user value.</param>
            <returns></returns>
            <remarks>
            This is used in conjunction with audit rules.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.Execute(Tortuga.Chain.Core.CommandExecutionToken{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.Core.CommandImplementation{Microsoft.Data.SqlClient.SqlCommand},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="state">User supplied state.</param>
            <exception cref="T:System.ArgumentNullException">
            executionToken;executionToken is null.
            or
            implementation;implementation is null.
            </exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.Execute(Tortuga.Chain.Core.OperationExecutionToken{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},Tortuga.Chain.Core.OperationImplementation{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.ExecuteAsync(Tortuga.Chain.Core.CommandExecutionToken{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.Core.CommandImplementationAsync{Microsoft.Data.SqlClient.SqlCommand},System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User supplied state.</param>
            <returns>Task.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOpenDataSource.ExecuteAsync(Tortuga.Chain.Core.OperationExecutionToken{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},Tortuga.Chain.Core.OperationImplementationAsync{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerOperationExecutionToken">
            <summary>
            Class SqlServerOperationExecutionToken.
            </summary>
            <seealso cref="T:Tortuga.Chain.Core.OperationExecutionToken`2" />
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerOperationExecutionToken.#ctor(Tortuga.Chain.DataSources.IOperationDataSource{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerOperationExecutionToken"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationName">Name of the operation. This is used for logging.</param>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerTableOrViewMetadata`1">
            <summary>
            Class SqlServerTableOrViewMetadata.
            </summary>
            <typeparam name="TDbType">The type of the t database type.</typeparam>
            <seealso cref="T:Tortuga.Chain.Metadata.TableOrViewMetadata`2" />
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTableOrViewMetadata`1.#ctor(Tortuga.Chain.Metadata.DatabaseMetadataCache{Tortuga.Chain.SqlServer.SqlServerObjectName,`0},Tortuga.Chain.SqlServer.SqlServerObjectName,System.Boolean,Tortuga.Chain.Metadata.ColumnMetadataCollection{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerTableOrViewMetadata`1" /> class.
            </summary>
            <param name="metadataCache">The metadata cache.</param>
            <param name="name">The name.</param>
            <param name="isTable">if set to <c>true</c> is a table.</param>
            <param name="columns">The columns.</param>
            <param name="hasTriggers">if set to <c>true</c> has triggers.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerTableOrViewMetadata`1.HasTriggers">
            <summary>
            Gets a value indicating whether the associated table has triggers.
            </summary>
            <value><c>true</c> if this instance has triggers; otherwise, <c>false</c>.</value>
            <remarks>This affects SQL generation.</remarks>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource">
            <summary>
            Class SqlServerTransactionalDataSource.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.#ctor(Tortuga.Chain.SqlServerDataSource,System.String,System.Nullable{System.Data.IsolationLevel},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource"/> class.
            </summary>
            <param name="dataSource">The parent connection.</param>
            <param name="transactionName">Name of the transaction.</param>
            <param name="isolationLevel">The isolation level. If not supplied, will use the database default.</param>
            <param name="forwardEvents">If true, logging events are forwarded to the parent connection.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.#ctor(Tortuga.Chain.SqlServerDataSource,System.String,System.Boolean,Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource" /> class.
            </summary>
            <param name="dataSource">The parent connection.</param>
            <param name="transactionName">Name of the transaction.</param>
            <param name="forwardEvents">If true, logging events are forwarded to the parent connection.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Cache">
            <summary>
            Gets or sets the cache to be used by this data source. The default is .NET's System.Runtime.Caching.MemoryCache.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.DatabaseMetadata">
            <summary>
            This object can be used to lookup database information.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.TransactionName">
            <summary>
            Gets the name of the transaction.
            </summary>
            <value>The name of the transaction.</value>
        </member>
        <member name="P:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.ExtensionCache">
            <summary>
            The extension cache is used by extensions to store data source specific information.
            </summary>
            <value>
            The extension cache.
            </value>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Commit">
            <summary>
            Commits the transaction and disposes the underlying connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Dispose">
            <summary>
            Closes the current transaction and connection. If not committed, the transaction is rolled back.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.GetExtensionData``1">
            <summary>
            Gets the extension data.
            </summary>
            <typeparam name="TTKey">The type of extension data desired.</typeparam>
            <returns>T.</returns>
            <remarks>Chain extensions can use this to store data source specific data. The key should be a data type defined by the extension.
            Transactional data sources should override this method and return the value held by their parent data source.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Rollback">
            <summary>
            Rolls back the transaction and disposes the underlying connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.TestConnectionAsync">
            <summary>
            Tests the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Dispose(System.Boolean)">
            <summary>
            Closes the current transaction and connection. If not committed, the transaction is rolled back.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Execute(Tortuga.Chain.Core.CommandExecutionToken{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.Core.CommandImplementation{Microsoft.Data.SqlClient.SqlCommand},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="state">User supplied state.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.Execute(Tortuga.Chain.Core.OperationExecutionToken{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},Tortuga.Chain.Core.OperationImplementation{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.ExecuteAsync(Tortuga.Chain.Core.CommandExecutionToken{Microsoft.Data.SqlClient.SqlCommand,Microsoft.Data.SqlClient.SqlParameter},Tortuga.Chain.Core.CommandImplementationAsync{Microsoft.Data.SqlClient.SqlCommand},System.Threading.CancellationToken,System.Object)">
            <summary>
            execute as an asynchronous operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User supplied state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.SqlServerTransactionalDataSource.ExecuteAsync(Tortuga.Chain.Core.OperationExecutionToken{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},Tortuga.Chain.Core.OperationImplementationAsync{Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient.SqlTransaction},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.Utilities.GetParameters(Tortuga.Chain.CommandBuilders.SqlBuilder{System.Data.SqlDbType})">
            <summary>
            Gets the parameters from a SQL Builder.
            </summary>
            <param name="sqlBuilder">The SQL builder.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.Utilities.UseTableVariable``1(Tortuga.Chain.CommandBuilders.SqlBuilder{``0},Tortuga.Chain.SqlServer.SqlServerTableOrViewMetadata{``0},System.String@,System.String@,System.String@)">
            <summary>
            Triggers need special handling for OUTPUT clauses.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.DataReaderExtensions">
            <summary>
            DataReaderExtensions is used for generating metadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the boolean.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetBooleanOrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the boolean or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the int16.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Int16.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetInt16OrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the int16 or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Nullable&lt;System.Int16&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the int32.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetInt32OrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the int32 or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the int64.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetByte(System.Data.Common.DbDataReader,System.String)">
            <summary>Gets the byte.</summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetInt64OrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the int64 or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Nullable&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetString(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetChar(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the char.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetStringOrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the string or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetCharOrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the char or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetUInt32(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the uint32.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetUInt32OrNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the uint32 or null.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Nullable&lt;System.UInt32&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetUInt64(System.Data.Common.DbDataReader,System.String)">
            <summary>Gets the u int64.</summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.UInt64.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetValue(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetValue``1(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.GetValue``1(System.Data.Common.DbDataReader,System.Int32)">
            <summary>Gets the value.</summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader">The data reader.</param>
            <param name="ordinal">The ordinal.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DataReaderExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Determines whether [is database null] [the specified column name].
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns><c>true</c> if [is database null] [the specified column name]; otherwise, <c>false</c>.</returns>
        </member>
    </members>
</doc>
