<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tortuga.Chain.Core</name>
    </assembly>
    <members>
        <member name="T:Tortuga.Chain.AbortableOperationEventArgs">
            <summary>
            Represents a notification from an abortable process such as a bulk insert.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.AbortableOperationEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AbortableOperationEventArgs"/> class.
            </summary>
            <param name="rowsAffected">The number of rows affected.</param>
        </member>
        <member name="P:Tortuga.Chain.AbortableOperationEventArgs.Abort">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tortuga.Chain.AbortableOperationEventArgs"/> is abort.
            </summary>
            <value>Set to True to abort the current operation.</value>
        </member>
        <member name="P:Tortuga.Chain.AbortableOperationEventArgs.RowsAffected">
            <summary>
            Gets the number of rows copied.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Appenders.Appender`1">
            <summary>
            An appender modifies the execution chain of an operation, usually by performing an action just before or after the database call.
            </summary>
            <typeparam name="TResult">The operation's result type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.#ctor(Tortuga.Chain.ILink{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.Appender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <exception cref="T:System.ArgumentNullException">previousLink</exception>
        </member>
        <member name="E:Tortuga.Chain.Appenders.Appender`1.ExecutionTokenPrepared">
            <summary>
            Occurs when an execution token has been prepared.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="E:Tortuga.Chain.Appenders.Appender`1.ExecutionTokenPreparing">
            <summary>
            Occurs when an execution token is about to be prepared.
            </summary>
            <remarks>
            This is mostly used by appenders to override SQL generation.
            </remarks>
        </member>
        <member name="P:Tortuga.Chain.Appenders.Appender`1.DataSource">
            <summary>
            Gets the data source that is associated with this materializer or appender.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Tortuga.Chain.Appenders.Appender`1.PreviousLink">
            <summary>
            Gets the previous link in the operation chain.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.CommandText">
            <summary>
            Returns the generated SQL statement of the previous link.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.OnCommandBuilt(Tortuga.Chain.Core.CommandBuiltEventArgs)">
            <summary>
            Override this if you want to examine or modify the DBCommand before it is executed.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.CommandBuiltEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.OnExecutionTokenPrepared(Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs)">
            <summary>
            Override this if you want to examine or modify the execution token before the DBCommand object is built.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`1.OnExecutionTokenPreparing(Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs)">
            <summary>
            Override this if you want to examine or modify the command builder before the execution token is built.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Tortuga.Chain.Appenders.Appender`2">
            <summary>
            An appender modifies the execution chain of an operation, usually by performing an action just before or after the database call. This version can convert an ILink from one type to another.
            </summary>
            <typeparam name="TIn">The type of the input type.</typeparam>
            <typeparam name="TOut">The type of the output type.</typeparam>
            <seealso cref="T:Tortuga.Chain.ILink`1" />
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.#ctor(Tortuga.Chain.ILink{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.Appender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <exception cref="T:System.ArgumentNullException">previousLink;previousLink is null.</exception>
        </member>
        <member name="E:Tortuga.Chain.Appenders.Appender`2.ExecutionTokenPrepared">
            <summary>
            Occurs when an execution token has been prepared.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="E:Tortuga.Chain.Appenders.Appender`2.ExecutionTokenPreparing">
            <summary>
            Occurs when an execution token is about to be prepared.
            </summary>
            <remarks>
            This is mostly used by appenders to override SQL generation.
            </remarks>
        </member>
        <member name="P:Tortuga.Chain.Appenders.Appender`2.DataSource">
            <summary>
            Gets the data source that is associated with this materializer or appender.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Tortuga.Chain.Appenders.Appender`2.PreviousLink">
            <summary>
            Gets the previous link in the operation chain.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.CommandText">
            <summary>
            Returns the generated SQL statement of the previous link.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.OnCommandBuilt(Tortuga.Chain.Core.CommandBuiltEventArgs)">
            <summary>
            Override this if you want to examine or modify the DBCommand before it is executed.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.CommandBuiltEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.OnExecutionTokenPrepared(Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs)">
            <summary>
            Override this if you want to examine or modify the execution token before the DBCommand object is built.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.Appender`2.OnExecutionTokenPreparing(Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs)">
            <summary>
            Override this if you want to examine or modify the command builder before the execution token is built.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Tortuga.Chain.Appenders.CacheAllItemsAppender`2">
            <summary>
            Caches each individual item in the collection.
            Implements the <see cref="T:Tortuga.Chain.Appenders.Appender`1" />
            Implements the <see cref="T:Tortuga.Chain.ICacheLink`1" />
            </summary>
            <typeparam name="TCollection">The type of the t collection.</typeparam>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <seealso cref="T:Tortuga.Chain.Appenders.Appender`1" />
            <seealso cref="T:Tortuga.Chain.ICacheLink`1" />
            <remarks>This operation will not read from the cache.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheAllItemsAppender`2.#ctor(Tortuga.Chain.ILink{`0},System.Func{`1,System.String},Tortuga.Chain.CachePolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.CacheAllItemsAppender`2" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKeyFunction">Function to generate cache keys.</param>
            <param name="policy">Optional cache policy.</param>
            <exception cref="T:System.ArgumentNullException">previousLink;previousLink is null.</exception>
            <exception cref="T:System.ArgumentException">cacheKey is null or empty.;cacheKey</exception>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheAllItemsAppender`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheAllItemsAppender`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Appenders.CacheResultAppender`1">
            <summary>
            Executes the previous link and caches the result.
            </summary>
            <typeparam name="TResult">The type of the t result type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheResultAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.Func{`0,System.String},Tortuga.Chain.CachePolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.CacheResultAppender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKeyFunction">Function to generate cache keys.</param>
            <param name="policy">Optional cache policy.</param>
            <exception cref="T:System.ArgumentNullException">cacheKeyFunction</exception>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheResultAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.String,Tortuga.Chain.CachePolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.CacheResultAppender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="policy">Optional cache policy.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheResultAppender`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.CacheResultAppender`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Appenders.InvalidateCacheAppender`1">
            <summary>
            Causes the cache to be invalidated when this operation is executed.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Tortuga.Chain.Appenders.InvalidateCacheAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.InvalidateCacheAppender`1"/> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKey">The cache key.</param>
            <exception cref="T:System.ArgumentNullException">previousLink;previousLink is null.</exception>
            <exception cref="T:System.ArgumentException">cacheKey is null or empty.;cacheKey</exception>
        </member>
        <member name="M:Tortuga.Chain.Appenders.InvalidateCacheAppender`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.InvalidateCacheAppender`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Appenders.NonNullLink`1">
            <summary>
            Converts an null returning ILink into a non-null returning ILink.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>If the previous link returns a null, this will throw an exception.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.NonNullLink`1.#ctor(Tortuga.Chain.ILink{`0})">
             <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.NonNullLink`1" /> class.
             </summary>
             <param name="previousLink">The previous link.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.NonNullLink`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.NonNullLink`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="T:Tortuga.Chain.Appenders.ReadOrCacheResultAppender`1">
            <summary>
            Reads the cache. If the value isn't found, the execute the previous link and cache the result.
            </summary>
            <typeparam name="TResult">The type of the t result type.</typeparam>
            <remarks>If this successfully reads from the cache, it will prevent prior links from executing.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.ReadOrCacheResultAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.String,Tortuga.Chain.CachePolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.ReadOrCacheResultAppender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="policy">Optional cache policy.</param>
            <exception cref="T:System.ArgumentException">cacheKey</exception>
        </member>
        <member name="M:Tortuga.Chain.Appenders.ReadOrCacheResultAppender`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.ReadOrCacheResultAppender`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Appenders.StrictModeAppender`1">
            <summary>
            Class StrictModeAppender.
            Implements the <see cref="T:Tortuga.Chain.Appenders.Appender`1" />
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <seealso cref="T:Tortuga.Chain.Appenders.Appender`1" />
        </member>
        <member name="M:Tortuga.Chain.Appenders.StrictModeAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.StrictModeAppender`1"/> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="strictMode">if set to <c>true</c> [strict mode].</param>
        </member>
        <member name="T:Tortuga.Chain.Appenders.TimeoutAppender`1">
            <summary>
            Class TimeoutAppender.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Appenders.TimeoutAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.Appender`1" /> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.TimeoutAppender`1.OnCommandBuilt(Tortuga.Chain.Core.CommandBuiltEventArgs)">
            <summary>
            Override this if you want to examine or modify the DBCommand before it is executed.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.CommandBuiltEventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">nam - f(e), "e is</exception>
        </member>
        <member name="T:Tortuga.Chain.Appenders.TraceAppender`1">
            <summary>
            Class TraceAppender.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Appenders.TraceAppender`1.#ctor(Tortuga.Chain.ILink{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.TraceAppender`1"/> class.
            </summary>
            <param name="previousLink">The previous link.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.TraceAppender`1.#ctor(Tortuga.Chain.ILink{`0},System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.TraceAppender`1"/> class.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="stream">The optional stream to direct the output. If null, Debug is used..</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.TraceAppender`1.OnCommandBuilt(Tortuga.Chain.Core.CommandBuiltEventArgs)">
            <summary>
            Override this if you want to examine or modify the DBCommand before it is executed.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.CommandBuiltEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Tortuga.Chain.Appenders.ValueNonNullLink`1">
            <summary>
            Converts an null returning ILink into a non-null returning ILink.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>If the previous link returns a null, this will throw an exception.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.ValueNonNullLink`1.#ctor(Tortuga.Chain.ILink{System.Nullable{`0}})">
             <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Appenders.NonNullLink`1" /> class.
             </summary>
             <param name="previousLink">The previous link.</param>
        </member>
        <member name="M:Tortuga.Chain.Appenders.ValueNonNullLink`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Appenders.ValueNonNullLink`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <remarks>If you don't override this method, it will call execute on the previous link.</remarks>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.AuditRule">
            <summary>
            Base class for all audit rules.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.AuditRule.#ctor(Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.AuditRule"/> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.AuditRule.AppliesWhen">
            <summary>
            Indicates when the rule is applicable.
            </summary>
            <value>
            The rule applies when.
            </value>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.AuditRuleCollection">
            <summary>
            An immutable collection of rules.
            </summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1" />
        </member>
        <member name="F:Tortuga.Chain.AuditRules.AuditRuleCollection.Empty">
            <summary>
            Returns an empty RulesCollection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.AuditRuleCollection.#ctor(System.Collections.Generic.IEnumerable{Tortuga.Chain.AuditRules.AuditRule})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.AuditRuleCollection"/> class.
            </summary>
            <param name="rules">The list of rules used to build this collection.</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.AuditRuleCollection.#ctor(Tortuga.Chain.AuditRules.AuditRuleCollection,System.Collections.Generic.IEnumerable{Tortuga.Chain.AuditRules.AuditRule})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.AuditRuleCollection" /> class.
            </summary>
            <param name="baseRules">The list of rules to be added upon.</param>
            <param name="additionalRules">The additional rules.</param>
            <exception cref="T:System.ArgumentNullException">
            baseRules
            or
            additionalRules
            </exception>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.AuditRuleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.AuditRuleCollection"/> class.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.AuditRuleCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.AuditRuleCollection.SoftDeleteForSelect">
            <summary>
            Gets the soft delete rules for select.
            </summary>
            <value>
            The soft delete for select.
            </value>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.AuditRuleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.AuditRules.AuditRule"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.AuditRules.AuditRule"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.AuditRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.AuditRuleCollection.UseSoftDelete(Tortuga.Chain.Metadata.TableOrViewMetadata)">
            <summary>
            Indicates whether or not a soft delete should be performed.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ColumnRule">
            <summary>
            This is the base class for rules that affect a single column.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ColumnRule.#ctor(System.String,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ColumnRule"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="appliesWhen">The applies when.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.ColumnRule.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ColumnRule.GenerateValue(System.Object,System.Object,System.Object)">
            <summary>
            Generates the value to be used for the operation.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ColumnValueGenerator">
            <summary>
            Rule Value Generator
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.DateTimeOffsetRule">
            <summary>
            Applies the current DateTimeOffset value to the indicated column.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.ColumnRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.DateTimeOffsetRule.#ctor(System.String,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.UserDataRule" /> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="appliesWhen">The rule can be applied to insert, update, and/or soft delete operations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert, Update, or Delete</exception>
            <remarks>
            This will have no effect on hard deletes.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.DateTimeOffsetRule.GenerateValue(System.Object,System.Object,System.Object)">
            <summary>
            Generates the value to be used for the operation.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.DateTimeRule">
            <summary>
            Applies the current DateTime value to the indicated column.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.ColumnRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.DateTimeRule.#ctor(System.String,System.DateTimeKind,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.UserDataRule" /> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="kind">The kind.</param>
            <param name="appliesWhen">The rule can be applied to insert, update, and/or soft delete operations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert, Update, or Delete</exception>
            <remarks>
            This will have no effect on hard deletes.
            </remarks>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.DateTimeRule.Kind">
            <summary>
            Gets the kind.
            </summary>
            <value>
            The kind.
            </value>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.DateTimeRule.GenerateValue(System.Object,System.Object,System.Object)">
            <summary>
            Generates the value to be used for the operation.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">kind is set incorrectly</exception>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ExceptWhenPredicate">
            <summary>
            This delegate is used for restricting access to a column
            </summary>
            <param name="userValue">The user value.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.OperationTypes">
            <summary>
            Indicates the type of operation being performed.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.None">
            <summary>
            Undefined operation.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.Insert">
            <summary>
            Applies the rule when performing an insert operation (including the insert portion of an Upsert)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.Update">
            <summary>
            Applies the rule when performing an update operation (including the update portion of an Upsert)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.InsertOrUpdate">
            <summary>
            Applies the rule when performing an insert or update operation (including the update portion of an Upsert)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.Delete">
            <summary>
            Applies the rule when performing a delete operation.
            </summary>
            <remarks>Usually used for soft delete support</remarks>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.Select">
            <summary>
            Applies the rule when performing a select operation.
            </summary>
            <remarks>Usually used for soft delete support</remarks>
        </member>
        <member name="F:Tortuga.Chain.AuditRules.OperationTypes.SelectOrDelete">
            <summary>
            Applies the rule when performing a select or delete operation.
            </summary>
            <remarks>Usually used for soft delete support</remarks>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.RestrictColumn">
            <summary>
            This rule is used to prevent users from reading or updating a column
            </summary>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.RestrictColumn.#ctor(System.String,System.String,Tortuga.Chain.AuditRules.OperationTypes,Tortuga.Chain.AuditRules.ExceptWhenPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.RestrictColumn"/> class.
            </summary>
            <param name="objectName">Name of the database object this rule applies to.</param>
            <param name="columnName">Name of the column.</param>
            <param name="appliesWhen">While operations are being restricted.</param>
            <param name="exceptWhen">This function will return true if the rule doesn't apply to this user..</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.RestrictColumn.#ctor(System.String,Tortuga.Chain.AuditRules.OperationTypes,Tortuga.Chain.AuditRules.ExceptWhenPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.RestrictColumn"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="appliesWhen">While operations are being restricted.</param>
            <param name="exceptWhen">This function will return true if the rule doesn't apply to this user..</param>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.RestrictColumn.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.RestrictColumn.ExceptWhen">
            <summary>
            Gets the except when.
            </summary>
            <value>
            The except when.
            </value>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.RestrictColumn.ObjectName">
            <summary>
            Gets the name of the object (e.g. table, view).
            </summary>
            <value>
            The name of the object.
            </value>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.SoftDeleteRule">
            <summary>
            If a column matching this rule is found, then soft deletes will be applied instead of hard deletes.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.SoftDeleteRule.#ctor(System.String,System.Object,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.SoftDeleteRule"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="deletedValue">The value that represents a deleted row.</param>
            <param name="appliesWhen">The rule can be applied to delete and/or select operations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be Select or Delete</exception>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.SoftDeleteRule.DeletedValue">
            <summary>
            Gets the deleted value.
            </summary>
            <value>
            The deleted value.
            </value>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.SoftDeleteRule.GenerateValue(System.Object,System.Object,System.Object)">
            <summary>
            Generates the value to be used for the operation.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.UserDataRule">
            <summary>
            This is a rule that overrides argument values with data on the user object.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.ColumnRule" />
            <remarks>This is usually used for CreatedBy/LastModifiedBy style columns</remarks>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.UserDataRule.#ctor(System.String,System.String,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.UserDataRule"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="appliesWhen">The rule can be applied to insert, update, and/or soft delete operations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert, Update, or Delete</exception>
            <remarks>This will have no effect on hard deletes.</remarks>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.UserDataRule.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.UserDataRule.GenerateValue(System.Object,System.Object,System.Object)">
            <summary>
            Generates the value to be used for the operation.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo">
            <summary>
            When this rule is in effect, objects that implement IDataErrorInfo will be checked.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo.#ctor(Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo"/> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert or Update</exception>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo.CheckValue(System.Object)">
            <summary>
            Checks the value for validation errors.
            </summary>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo.CheckValueCore(System.ComponentModel.IDataErrorInfo)">
            <summary>
            Checks the value core.
            </summary>
            <param name="validation">The validation.</param>
            <exception cref="T:System.ArgumentNullException">validation</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation errors: " + errors</exception>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo`1">
            <summary>
            When this rule is in effect, objects of type T will be checked.
            Implements the <see cref="T:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo" />
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo`1.#ctor(Tortuga.Chain.AuditRules.OperationTypes,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo`1" /> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
            <param name="validationMethod">The method on the object that triggers validation. Usually this will be something like x =&gt; x.Validate().</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithDataErrorInfo`1.CheckValue(System.Object)">
            <summary>
            Checks the value for validation errors.
            </summary>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo">
            <summary>
            When this rule is in effect, objects that implement INotifyDataErrorInfo will be checked.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo.#ctor(Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo"/> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert or Update</exception>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo.CheckValue(System.Object)">
            <summary>
            Checks the value for validation errors.
            </summary>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo.CheckValueCore(System.ComponentModel.INotifyDataErrorInfo)">
            <summary>
            Checks the value core.
            </summary>
            <param name="validation">The validation.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo`1">
            <summary>
            When this rule is in effect, objects of type T will be checked.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo`1.#ctor(Tortuga.Chain.AuditRules.OperationTypes,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo`1" /> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
            <param name="validationMethod">The method on the object that triggers validation. Usually this will be something like x =&gt; x.Validate().</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithNotifyDataErrorInfo`1.CheckValue(System.Object)">
            <summary>
            Checks the value for validation errors.
            </summary>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValidateWithValidatable">
            <summary>
            When this rule is in effect, objects that implement IValidatable will be checked.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithValidatable.#ctor(Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValidateWithValidatable"/> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert or Update</exception>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidateWithValidatable.CheckValue(System.Object)">
            <summary>
            Checks the value for validation errors.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValidationRule">
            <summary>
            Base class for validation style rules.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.AuditRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidationRule.#ctor(Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValidationRule"/> class.
            </summary>
            <param name="appliesWhen">The rule applies when.</param>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValidationRule.CheckValue(System.Object)">
            <summary>
            Checks the value for validation errors.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">A ValidationException will be thrown if the object contains validation errors.</exception>
        </member>
        <member name="T:Tortuga.Chain.AuditRules.ValueRule">
            <summary>
            Applies the indicated value to the column, overriding any previously applied value.
            </summary>
            <seealso cref="T:Tortuga.Chain.AuditRules.ColumnRule" />
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValueRule.#ctor(System.String,System.Object,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.UserDataRule" /> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="value">The value to apply.</param>
            <param name="appliesWhen">The rule can be applied to insert, update, and/or soft delete operations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert, Update, or Delete</exception>
            <remarks>
            This will have no effect on hard deletes.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValueRule.#ctor(System.String,Tortuga.Chain.AuditRules.ColumnValueGenerator,Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.AuditRules.ValueRule"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="valueFactory">The value factory.</param>
            <param name="appliesWhen">The applies when.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">appliesWhen;appliesWhen may only be a combination of Insert, Update, or Delete</exception>
        </member>
        <member name="P:Tortuga.Chain.AuditRules.ValueRule.ValueFactory">
            <summary>
            Gets the value factory.
            </summary>
            <value>
            The value factory.
            </value>
        </member>
        <member name="M:Tortuga.Chain.AuditRules.ValueRule.GenerateValue(System.Object,System.Object,System.Object)">
            <summary>
            Generates the value to be used for the operation.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
            <param name="currentValue">The current value. Used when the rule is conditionally applied.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CachePolicy">
            <summary>
            Class CachePolicy.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CachePolicy.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.CachePolicy"/> class.
            </summary>
            <param name="absoluteExpiration">The absolute expiration.</param>
        </member>
        <member name="M:Tortuga.Chain.CachePolicy.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.CachePolicy"/> class.
            </summary>
            <param name="slidingExpiration">The sliding expiration.</param>
        </member>
        <member name="P:Tortuga.Chain.CachePolicy.AbsoluteExpiration">
            <summary>
            Gets or sets the absolute expiration.
            </summary>
            <value>The absolute expiration.</value>
        </member>
        <member name="P:Tortuga.Chain.CachePolicy.SlidingExpiration">
            <summary>
            Gets or sets the sliding expiration.
            </summary>
            <value>The sliding expiration.</value>
        </member>
        <member name="T:Tortuga.Chain.CollectionOptions">
            <summary>
            Indicates how the collection will be generated from a result set.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.CollectionOptions.None">
            <summary>
            Use the default behavior.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.CollectionOptions.InferConstructor">
            <summary>
            Infer which constructor to use. When this option is chosen, individual properties will not be set.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.DbCommandBuilder">
            <summary>
            This is the non-generic version of the base class from which all other command builders are created.
            </summary>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.IDbCommandBuilder" />
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.DbCommandBuilder.StrictMode">
            <summary>
            Gets or sets a value indicating whether strict mode is enabled.
            </summary>
            <remarks>Strict mode requires all properties that don't represent columns to be marked with the NotMapped attribute.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder.AsNonQuery">
            <summary>
            Indicates this operation has no result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>If the column name was not found, this will return null</returns>
            <remarks></remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>If the command builder doesn't know which columns are non-nullable, an empty list will be returned.</returns>
            <remarks>This is used by materializers to skip IsNull checks.</remarks>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.DbCommandBuilder`2">
            <summary>
            This is the base class from which all other command builders are created.
            </summary>
            <typeparam name="TCommand">The type of the command used.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.DbCommandBuilder`2"/> class.</summary>
            <param name="dataSource">The data source.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.DbCommandBuilder`2.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder`2.AsNonQuery">
            <summary>
            Indicates this operation has no result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbCommandBuilder`2.Prepare(Tortuga.Chain.Materializers.Materializer{`0,`1})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2">
            <summary>
            This is the base class from which all other operation builders are created.
            </summary>
            <typeparam name="TConnection">The type of the t connection.</typeparam>
            <typeparam name="TTransaction">The type of the t transaction.</typeparam>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.DbCommandBuilder" />
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.#ctor(Tortuga.Chain.DataSources.IOperationDataSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.AsNonQuery">
            <summary>
            Indicates this operation has no result set.
            </summary>
            <returns>ILink&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.Prepare">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.Implementation(`0,`1)">
            <summary>
            Implementation the specified operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.DbOperationBuilder`2.ImplementationAsync(`0,`1,System.Threading.CancellationToken)">
            <summary>
            Implementation the specified operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.GenericDbSqlCall.#ctor(Tortuga.Chain.GenericDbDataSource,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.GenericDbSqlCall"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="argumentValue">The argument value.</param>
            <exception cref="T:System.ArgumentException">sqlStatement is null or empty.;sqlStatement</exception>
            <exception cref="T:System.ArgumentException">sqlStatement is null or empty.;sqlStatement</exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.GenericDbSqlCall.Prepare(Tortuga.Chain.Materializers.Materializer{System.Data.Common.DbCommand,System.Data.Common.DbParameter})">
            <summary>
            Prepares the command for execution by generating any necessary SQL.
            </summary>
            <param name="materializer">The materializer.</param>
            <returns>ExecutionToken&lt;TCommand&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.GenericDbSqlCall.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.GenericDbSqlCall.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IDbCommandBuilder">
            <summary>
            This allows executing command builders without returning anything.
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new method will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IDbCommandBuilder.AsNonQuery">
            <summary>
            Indicates this operation has no result set.
            </summary>
            <returns>This may contain the result code or number of rows affected.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IDbCommandBuilder.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IDbCommandBuilder.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IDbCommandBuilder.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IDbCommandBuilder.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>If the column name was not found, this will return null</remarks>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder">
            <summary>
            This allows the use of multi-row materializers against a command builder.
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new method will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToBooleanList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of booleans.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToBooleanList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of booleans.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToByteArrayList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of byte arrays.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToByteArrayList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of byte arrays.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToCollection``1(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as a list of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToCollection``2(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as a list of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDataTable">
            <summary>
            Indicates the results should be materialized as a DataSet.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTime.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeOffsetList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTimeOffset.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeOffsetList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeOffsetSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTimeOffset.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeOffsetSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTime.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDateTimeSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDecimalList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDecimalList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDecimalSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDecimalSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDictionary``2(System.String,Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyColumn">The key column.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns>IConstructibleMaterializer&lt;Dictionary&lt;TKey, TObject&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDictionary``3(System.String,Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <typeparam name="TDictionary">The type of dictionary.</typeparam>
            <param name="keyColumn">The key column.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns>IConstructibleMaterializer&lt;TDictionary&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDictionary``2(System.Func{``1,``0},Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyFunction">The key function.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns>IConstructibleMaterializer&lt;Dictionary&lt;TKey, TObject&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDictionary``3(System.Func{``1,``0},Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <typeparam name="TDictionary">The type of dictionary.</typeparam>
            <param name="keyFunction">The key function.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns>IConstructibleMaterializer&lt;TDictionary&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDoubleList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDoubleList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDoubleSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDoubleSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToDynamicCollection">
            <summary>
            Materializes the result as a list of dynamically typed objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToGuidList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of Guids.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToGuidList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of Guids.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToGuidSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of Guids.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToGuidSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of Guids.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToImmutableArray``1(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as an immutable array of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns>Tortuga.Chain.IConstructibleMaterializer&lt;System.Collections.Immutable.ImmutableArray&lt;TObject&gt;&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
            <remarks>In theory this will offer better performance than ToImmutableList if you only intend to read the result.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToImmutableDictionary``2(System.Func{``1,``0},Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a immutable dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyFunction">The key function.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToImmutableDictionary``2(System.String,Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a immutable dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyColumn">The key column.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToImmutableList``1(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as an immutable list of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns>Tortuga.Chain.IConstructibleMaterializer&lt;System.Collections.Immutable.ImmutableList&lt;TObject&gt;&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
            <remarks>In theory this will offer better performance than ToImmutableArray if you intend to further modify the result.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt16List(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt16List(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt16Set(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt16Set(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt32List(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt32List(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt32Set(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt32Set(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt64List(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt64List(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt64Set(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToInt64Set(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToSingleList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToSingleList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToSingleSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToSingleSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToStringList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of strings.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToStringList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of strings.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToStringSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of strings.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToStringSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of strings.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToTable">
            <summary>
            Indicates the results should be materialized as a Table.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToTimeSpanList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of TimeSpan.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToTimeSpanList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToTimeSpanSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of TimeSpan.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToTimeSpanSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToXElement(Tortuga.Chain.ListOptions)">
            <summary>
            Materializes the result as a list of XDocuments.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>Tortuga.Chain.ILink&lt;System.Collections.Generic.List&lt;XDocument&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder.ToXElement(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Materializes the result as a list of XDocuments.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listOptions">The list options.</param>
            <returns>Tortuga.Chain.ILink&lt;System.Collections.Generic.List&lt;XDocument&gt;&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder">
            <summary>
            This command builder may return multiple record sets
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new method will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder.ToCollectionSet``2">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder.ToCollectionSet``3">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <typeparam name="T3">The type of the 3rd collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder.ToCollectionSet``4">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <typeparam name="T3">The type of the 3rd collection.</typeparam>
            <typeparam name="T4">The type of the 4th collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder.ToCollectionSet``5">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <typeparam name="T3">The type of the 3rd collection.</typeparam>
            <typeparam name="T4">The type of the 4th collection.</typeparam>
            <typeparam name="T5">The type of the 5th collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder.ToDataSet(System.String[])">
            <summary>
            Indicates the results should be materialized as a DataSet.
            </summary>
            <param name="tableNames">The table names.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder.ToTableSet(System.String[])">
            <summary>
            Indicates the results should be materialized as a set of tables.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder`1">
            <summary>
            This represents command builders that operate on single object parameters: Insert, Update, Upsert, Delete
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder`1.ArgumentValue">
            <summary>
            Gets the argument value passed to the command builder.
            </summary>
            <value>The argument value.</value>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder`1.ToObject(Tortuga.Chain.RowOptions)">
            <summary>
            Materializes the result as a new instance of the same type as the argumentValue
            </summary>
            <param name="rowOptions">The row options.</param>
            <returns></returns>
            <remarks>To update the argumentValue itself, use WithRefresh() instead.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder`1.WithKeys(System.String[])">
            <summary>
            Uses an explicitly specified set of key column(s). This overrides the UseKeyAttribute option.
            </summary>
            <param name="columnNames">The column names that form a unique key.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder`1.WithRefresh">
            <summary>
            After executing the operation, refreshes the properties on the argumentValue by reading the updated values from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder">
            <summary>
            This allows the use of scalar materializers against a command builder.
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new methods will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToBoolean">
            <summary>
            Indicates the results should be materialized as a Boolean.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToBoolean(System.String)">
            <summary>
            Indicates the results should be materialized as a Boolean.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToBooleanOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Boolean.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToBooleanOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Boolean.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToByte">
            <summary>
            Indicates the results should be materialized as a byte.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToByte(System.String)">
            <summary>
            Indicates the results should be materialized as a byte.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToByteArray">
            <summary>
            Indicates the results should be materialized as a byte array.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToByteArray(System.String)">
            <summary>
            Indicates the results should be materialized as a byte array.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToByteOrNull">
            <summary>
            Indicates the results should be materialized as a nullable byte.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToByteOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable byte.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTime">
            <summary>
            Indicates the results should be materialized as a DateTime.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTime(System.String)">
            <summary>
            Indicates the results should be materialized as a DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTimeOffset">
            <summary>
            Indicates the results should be materialized as a DateTimeOffset.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTimeOffset(System.String)">
            <summary>
            Indicates the results should be materialized as a DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTimeOffsetOrNull">
            <summary>
            Indicates the results should be materialized as a nullable DateTimeOffset.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTimeOffsetOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTimeOrNull">
            <summary>
            Indicates the results should be materialized as a nullable DateTime.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDateTimeOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDecimal">
            <summary>
            Indicates the results should be materialized as a Decimal.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDecimal(System.String)">
            <summary>
            Indicates the results should be materialized as a Decimal.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDecimalOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Decimal.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDecimalOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Decimal.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDouble">
            <summary>
            Indicates the results should be materialized as a Double.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDouble(System.String)">
            <summary>
            Indicates the results should be materialized as a Double.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDoubleOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Double.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToDoubleOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Double.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToGuid">
            <summary>
            Indicates the results should be materialized as a Guid.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToGuid(System.String)">
            <summary>
            Indicates the results should be materialized as a Guid.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToGuidOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Guid.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToGuidOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Guid.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt16">
            <summary>
            Indicates the results should be materialized as a Int16.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt16(System.String)">
            <summary>
            Indicates the results should be materialized as a Int16.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt16OrNull">
            <summary>
            Indicates the results should be materialized as a nullable Int16.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt16OrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Int16.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt32">
            <summary>
            Indicates the results should be materialized as a Int32.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt32(System.String)">
            <summary>
            Indicates the results should be materialized as a Int32.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt32OrNull">
            <summary>
            Indicates the results should be materialized as a nullable Int32.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt32OrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Int32.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt64">
            <summary>
            Indicates the results should be materialized as a Int64.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt64(System.String)">
            <summary>
            Indicates the results should be materialized as a Int64.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt64OrNull">
            <summary>
            Indicates the results should be materialized as a nullable Int64.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToInt64OrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Int64.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToSingle">
            <summary>
            Indicates the results should be materialized as a Single.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToSingle(System.String)">
            <summary>
            Indicates the results should be materialized as a Single.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToSingleOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Single.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToSingleOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Single.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToString">
            <summary>
            Indicates the results should be materialized as a nullable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToString(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable string.
            </summary>
            <returns></returns>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToTimeSpan">
            <summary>
            Indicates the results should be materialized as a TimeSpan.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToTimeSpan(System.String)">
            <summary>
            Indicates the results should be materialized as a TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToTimeSpanOrNull">
            <summary>
            Indicates the results should be materialized as a nullable TimeSpan.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToTimeSpanOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToXml">
            <summary>
            Materializes the result as an XElement.
            </summary>
            <returns>ILink&lt;XElement&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder.ToXml(System.String)">
            <summary>
            Materializes the result as an XElement.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>ILink&lt;XElement&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder">
            <summary>
            This allows the use of scalar and single row materializers against a command builder.
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new methods will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder.ToDataRow(Tortuga.Chain.RowOptions)">
            <summary>
            Indicates the results should be materialized as a Row.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder.ToDynamicObject(Tortuga.Chain.RowOptions)">
            <summary>
            Materializes the result as a dynamic object
            </summary>
            <param name="rowOptions">The row options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder.ToObject``1(Tortuga.Chain.RowOptions)">
            <summary>
            Materializes the result as an instance of the indicated type
            </summary>
            <typeparam name="TObject">The type of the object returned.</typeparam>
            <param name="rowOptions">The row options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder.ToRow(Tortuga.Chain.RowOptions)">
            <summary>
            Indicates the results should be materialized as a Row.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder">
            <summary>
            This is a specialization of IMultipleRowDbCommandBuilder that includes support for sorting and limiting
            </summary>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder" />
            <remarks>
            Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new method will be added over time.
            </remarks>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder" />
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.AsCount">
            <summary>
            Returns the row count using a <c>SELECT Count(*)</c> style query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.AsCount(System.String,System.Boolean)">
            <summary>
            Returns the row count for a given column. <c>SELECT Count(columnName)</c>
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="distinct">if set to <c>true</c> use <c>SELECT COUNT(DISTINCT columnName)</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithFilter(System.String)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithLimits(System.Int32,Tortuga.Chain.LimitOptions,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithLimits(System.Int32,System.Int32)">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">The number of rows to take.</param>
            <returns></returns>
            <remarks>Warning: row skipping using this method can be significantly slower than using a WHERE clause that uses an indexed column.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithSorting(Tortuga.Chain.SortExpression[])">
            <summary>
            Adds sorting to the command builder.
            </summary>
            <param name="sortExpressions">The sort expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder.WithSorting(System.Collections.Generic.IEnumerable{Tortuga.Chain.SortExpression})">
            <summary>
            Adds sorting to the command builder
            </summary>
            <param name="sortExpressions">The sort expressions.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder">
            <summary>
            This is a specialization of IMultipleRowDbCommandBuilder that includes support for sorting. It is only used for set-based update operations.
            </summary>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder" />
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder.All">
            <summary>
            Applies this command to all rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder.WithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder.WithFilter(System.String)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder.WithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="whereArgumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder`2">
            <summary>
            Interface IUpdateManyCommandBuilder
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder" />
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder`2.All">
            <summary>
            Applies this command to all rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder`2.WithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder`2.WithFilter(System.String)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder`2.WithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="whereArgumentValue">The where clause argument value.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2">
            <summary>
            This is the base class for command builders that can potentially return multiple rows.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2"/> class.</summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToBooleanList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of booleans.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToBooleanList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of booleans.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToByteArrayList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of byte arrays.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToByteArrayList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of byte arrays.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToByteList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of bytes.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToByteList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of bytes.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToCollection``1(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as a list of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToCollection``2(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as a list of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MappingException">
            </exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDataTable">
            <summary>
            Indicates the results should be materialized as a DataSet.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTime.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeOffsetList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeOffsetList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of DateTimeOffset.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeOffsetSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTimeOffset.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;DateTimeOffset&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeOffsetSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;DateTimeOffset&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTime.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;DateTime&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDateTimeSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;DateTime&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDecimalList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDecimalList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDecimalSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Decimal&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDecimalSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Decimal&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDictionary``2(System.String,Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyColumn">The key column.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDictionary``3(System.String,Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <typeparam name="TDictionary">The type of dictionary.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDictionary``2(System.Func{``1,``0},Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyFunction">The key function.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDictionary``3(System.Func{``1,``0},Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <typeparam name="TDictionary">The type of dictionary.</typeparam>
            <param name="keyFunction">The key function.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDoubleList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDoubleList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDoubleSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Double&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDoubleSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Double&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToDynamicCollection">
            <summary>
            Materializes the result as a list of dynamically typed objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToGuidList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of Guids.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToGuidList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of Guids.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToGuidSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of Guids.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;Guid&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToGuidSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of Guids.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;Guid&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToImmutableArray``1(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as an immutable array of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns>Tortuga.Chain.IConstructibleMaterializer&lt;System.Collections.Immutable.ImmutableArray&lt;TObject&gt;&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
            <remarks>In theory this will offer better performance than ToImmutableList if you only intend to read the result.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToImmutableDictionary``2(System.Func{``1,``0},Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a immutable dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyFunction">The key function.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToImmutableDictionary``2(System.String,Tortuga.Chain.DictionaryOptions)">
            <summary>
            Materializes the result as a immutable dictionary of objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="keyColumn">The key column.</param>
            <param name="dictionaryOptions">The dictionary options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToImmutableList``1(Tortuga.Chain.CollectionOptions)">
            <summary>
            Materializes the result as an immutable list of objects.
            </summary>
            <typeparam name="TObject">The type of the model.</typeparam>
            <param name="collectionOptions">The collection options.</param>
            <returns>Tortuga.Chain.IConstructibleMaterializer&lt;System.Collections.Immutable.ImmutableList&lt;TObject&gt;&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
            <remarks>In theory this will offer better performance than ToImmutableArray if you intend to further modify the result.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt16List(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt16List(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt16Set(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Int16&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt16Set(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Int16&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt32List(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt32List(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt32Set(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt32Set(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt64List(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt64List(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt64Set(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Int64&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToInt64Set(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of integers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Int64&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToSingleList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToSingleList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToSingleSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Single&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToSingleSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of numbers.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.Single&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToStringList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of strings.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToStringList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of strings.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToStringSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of strings.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToStringSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of strings.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToTable">
            <summary>
            Indicates the results should be materialized as a Table.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToTimeSpanList(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToTimeSpanList(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a list of TimeSpan.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToTimeSpanSet(Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of TimeSpan.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;TimeSpan&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToTimeSpanSet(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Indicates the results should be materialized as a set of TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
            <returns>ILink&lt;HashSet&lt;TimeSpan&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToXElement(Tortuga.Chain.ListOptions)">
            <summary>
            Materializes the result as a list of XDocuments.
            </summary>
            <param name="listOptions">The list options.</param>
            <returns>Tortuga.Chain.ILink&lt;System.Collections.Generic.List&lt;XDocument&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2.ToXElement(System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Materializes the result as a list of XDocuments.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listOptions">The list options.</param>
            <returns>Tortuga.Chain.ILink&lt;System.Collections.Generic.List&lt;XDocument&gt;&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2">
            <summary>
            This is the base class for command builders that can potentially return multiple result sets.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2"/> class.</summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.ToCollectionSet``2">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.ToCollectionSet``3">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <typeparam name="T3">The type of the 3rd collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.ToCollectionSet``4">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <typeparam name="T3">The type of the 3rd collection.</typeparam>
            <typeparam name="T4">The type of the 4th collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.ToCollectionSet``5">
            <summary>
            To the collection set.
            </summary>
            <typeparam name="T1">The type of the 1st collection.</typeparam>
            <typeparam name="T2">The type of the 2nd collection.</typeparam>
            <typeparam name="T3">The type of the 3rd collection.</typeparam>
            <typeparam name="T4">The type of the 4th collection.</typeparam>
            <typeparam name="T5">The type of the 5th collection.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.ToDataSet(System.String[])">
            <summary>
            Indicates the results should be materialized as a DataSet.
            </summary>
            <param name="tableNames">The table names.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder`2.ToTableSet(System.String[])">
            <summary>
            Indicates the results should be materialized as a set of tables.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3">
            <summary>
            This represents command builders that operate on single object parameters: Insert, Update, Upsert, Delete
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <typeparam name="TArgument">The type of the argument.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1},`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.ArgumentValue">
            <summary>
            Gets the argument value passed to the command builder.
            </summary>
            <value>The argument value.</value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.KeyColumns">
            <summary>
            Gets the set of key column(s) to use instead of the primary key(s).
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.ToObject(Tortuga.Chain.RowOptions)">
            <summary>
            Materializes the result as a new instance of the same type as the argumentValue
            </summary>
            <param name="rowOptions">The row options.</param>
            <returns></returns>
            <remarks>To update the argumentValue itself, use WithRefresh() instead.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>
            If the column name was not found, this will return null
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.TryGetNonNullableColumns">
            <summary>
            Returns a list of columns known to be non-nullable.
            </summary>
            <returns>
            If the command builder doesn't know which columns are non-nullable, an empty list will be returned.
            </returns>
            <remarks>
            This is used by materializers to skip IsNull checks.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.WithKeys(System.String[])">
            <summary>
            Uses an explicitly specified set of key column(s). This overrides the UseKeyAttribute option.
            </summary>
            <param name="columnNames">The column names that form a unique key.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.WithRefresh">
            <summary>
            After executing the operation, refreshes the properties on the argumentValue by reading the updated values from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder`3.OnGetTable">
            <summary>
            Called when ObjectDbCommandBuilder needs a reference to the associated table or view.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.ParameterBuilderCallback`2">
            <summary>
            Callback for the parameter builder.
            </summary>
            <typeparam name="TParameter">The type of the desired DbParameter.</typeparam>
            <typeparam name="
            TDbType">The database specific DbType</typeparam>
            <param name="entry">Metadata about the parameter in question.</param>
            <returns>TParameter.</returns>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2">
            <summary>
            This is the base class for command builders that return one value.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2"/> class.</summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToBoolean">
            <summary>
            Indicates the results should be materialized as a Boolean.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToBoolean(System.String)">
            <summary>
            Indicates the results should be materialized as a Boolean.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToBooleanOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Boolean.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToBooleanOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Boolean.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByte">
            <summary>
            Indicates the results should be materialized as a byte.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByte(System.String)">
            <summary>
            Indicates the results should be materialized as a byte.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByteArray">
            <summary>
            Indicates the results should be materialized as a byte array.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByteArray(System.String)">
            <summary>
            Indicates the results should be materialized as a byte array.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByteArrayOrNull">
            <summary>
            Indicates the results should be materialized as a byte array or null.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByteArrayOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a byte array or null.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByteOrNull">
            <summary>
            Indicates the results should be materialized as a nullable byte.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToByteOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable byte.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTime">
            <summary>
            Indicates the results should be materialized as a DateTime.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTime(System.String)">
            <summary>
            Indicates the results should be materialized as a DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTimeOffset">
            <summary>
            Indicates the results should be materialized as a DateTimeOffset.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTimeOffset(System.String)">
            <summary>
            Indicates the results should be materialized as a DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTimeOffsetOrNull">
            <summary>
            Indicates the results should be materialized as a nullable DateTimeOffset.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTimeOffsetOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable DateTimeOffset.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTimeOrNull">
            <summary>
            Indicates the results should be materialized as a nullable DateTime.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDateTimeOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable DateTime.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDecimal">
            <summary>
            Indicates the results should be materialized as a Decimal.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDecimal(System.String)">
            <summary>
            Indicates the results should be materialized as a Decimal.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDecimalOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Decimal.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDecimalOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Decimal.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDouble">
            <summary>
            Indicates the results should be materialized as a Double.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDouble(System.String)">
            <summary>
            Indicates the results should be materialized as a Double.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDoubleOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Double.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToDoubleOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Double.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToGuid">
            <summary>
            Indicates the results should be materialized as a Guid.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToGuid(System.String)">
            <summary>
            Indicates the results should be materialized as a Guid.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToGuidOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Guid.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToGuidOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Guid.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt16">
            <summary>
            Indicates the results should be materialized as a Int16.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt16(System.String)">
            <summary>
            Indicates the results should be materialized as a Int16.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt16OrNull">
            <summary>
            Indicates the results should be materialized as a nullable Int16.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt16OrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Int16.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt32">
            <summary>
            Indicates the results should be materialized as a Int32.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt32(System.String)">
            <summary>
            Indicates the results should be materialized as a Int32.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt32OrNull">
            <summary>
            Indicates the results should be materialized as a nullable Int32.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt32OrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Int32.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt64">
            <summary>
            Indicates the results should be materialized as a Int64.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt64(System.String)">
            <summary>
            Indicates the results should be materialized as a Int64.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt64OrNull">
            <summary>
            Indicates the results should be materialized as a nullable Int64.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToInt64OrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Int64.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToSingle">
            <summary>
            Indicates the results should be materialized as a Single.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToSingle(System.String)">
            <summary>
            Indicates the results should be materialized as a Single.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToSingleOrNull">
            <summary>
            Indicates the results should be materialized as a nullable Single.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToSingleOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable Single.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToString">
            <summary>
            Indicates the results should be materialized as a non-nullable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToString(System.String)">
            <summary>
            Indicates the results should be materialized as a non-nullable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToStringOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable string.
            </summary>
            <returns></returns>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToStringOrNull">
            <summary>
            Indicates the results should be materialized as a nullable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToTimeSpan">
            <summary>
            Indicates the results should be materialized as a TimeSpan.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToTimeSpan(System.String)">
            <summary>
            Indicates the results should be materialized as a TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToTimeSpanOrNull">
            <summary>
            Indicates the results should be materialized as a nullable TimeSpan.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToTimeSpanOrNull(System.String)">
            <summary>
            Indicates the results should be materialized as a nullable TimeSpan.
            </summary>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToXml">
            <summary>
            Materializes the result as an XElement.
            </summary>
            <returns>ILink&lt;XElement&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToXml(System.String)">
            <summary>
            Materializes the result as an XElement.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>ILink&lt;XElement&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToXmlOrNull">
            <summary>
            Materializes the result as an XElement or null.
            </summary>
            <returns>ILink&lt;XElement&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder`2.ToXmlOrNull(System.String)">
            <summary>
            Materializes the result as an XElement or null.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>ILink&lt;XElement&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2">
            <summary>
            This is the base class for command builders that can potentially return one row.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2"/> class.</summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2.ToDataRow(Tortuga.Chain.RowOptions)">
            <summary>
            Indicates the results should be materialized as a Row.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2.ToDynamicObject(Tortuga.Chain.RowOptions)">
            <summary>
            Materializes the result as a dynamic object
            </summary>
            <param name="rowOptions">The row options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2.ToObject``1(Tortuga.Chain.RowOptions)">
            <summary>
            Materializes the result as an instance of the indicated type
            </summary>
            <typeparam name="TObject">The type of the object returned.</typeparam>
            <param name="rowOptions">The row options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder`2.ToRow(Tortuga.Chain.RowOptions)">
            <summary>
            Indicates the results should be materialized as a Row.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.SqlBuilder">
            <summary>
            Helper functions for building SQL statements.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder.CheckForOverlaps(System.Object,System.Object,System.String)">
            <summary>
            Checks to see of the same property appears in both objects. If it does, an InvalidOperationException is thrown with the provided error message.
            </summary>
            <param name="firstObject">The first object.</param>
            <param name="secondObject">The second object.</param>
            <param name="errorFormat">The error format. Slot 0 is the matching property.</param>
            <returns>System.String.</returns>
            <remarks>If either object is null, this check is skipped.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder.GetParameters``1(System.Object)">
            <summary>
            Gets parameters from an argument value.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <param name="argumentValue">The argument value .</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder.GetParameters``1(System.Object,System.Func{``0})">
            <summary>
            Gets parameters from an argument value.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <param name="argumentValue">The argument value .</param>
            <param name="parameterBuilder">The parameter builder. This should set the parameter's database specific DbType property.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1">
            <summary>Struct SqlBuilderEntry</summary>
            <typeparam name="TDbType">The type of the database type.</typeparam>
            <remarks>This is a struct because we want fast allocations and copies. Try to keep it at 16 bytes or less.</remarks>
        </member>
        <member name="F:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.Flags.UseParameter2">
            <summary>
            This allows the parameter to be used a second time. It is needed when using anonymous parameters.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.Flags.UseClrNameAsAlias">
            <summary>
            The use Clr name as alias when reading. Used for object materialization purposes.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.Details">
            <summary>
            Gets or sets the immutable column metadata.
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.IsFormalParameter">
            <summary>
            Gets or sets a value indicating whether this is a formal parameter for a stored procedure or table value function.
            </summary>
            <value>
              <c>true</c> if [formal parameter]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.IsKey">
            <summary>
            Gets or sets a value indicating whether this column should be treated as primary key.
            </summary>
            <value>
            <c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
            <remarks>
            This can be overridden. For example, if the parameter object defines its own alternate keys.
            </remarks>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.ParameterColumn">
            <summary>
            When non-null, this indicates that we want to use a table value parameter instead of a normal parameter.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.ParameterValue">
            <summary>
            Gets or sets the value to be used when constructing parameters.
            </summary>
            <value>
            The parameter value.
            </value>
            <remarks>A null means this parameter's value was not set. A DBNull.Value means it is passed to the database as a null.</remarks>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.RestrictedInsert">
            <summary>
            Gets a value indicating whether restricted from inserting.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.RestrictedRead">
            <summary>
            Gets a value indicating whether restricted from reading.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.RestrictedUpdate">
            <summary>
            Gets a value indicating whether restricted from updating.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.UseClrNameAsAlias">
            <summary>
            Gets a value indicating whether the SQL generator should produce an AS clause for this column.
            </summary>
            <remarks>This is used when the actual column name doesn't match the CLR-compatible version of the column name. This could happen when the real column name has spaces.</remarks>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.UseForInsert">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1"/> participates in insert operations.
            </summary>
            <value>
              <c>true</c> if insert; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.UseForRead">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1"/> participates in read operations.
            </summary>
            <value>
              <c>true</c> if read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.UseForUpdate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1"/> participates in update operations.
            </summary>
            <value>
              <c>true</c> if update; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.UseParameter">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1"/> participates in parameter generation.
            </summary>
            <value>
              <c>true</c> if [use parameter]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1.UseParameter2">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tortuga.Chain.CommandBuilders.SqlBuilderEntry`1" /> participates in the second pass of parameter generation.
            </summary>
            <value><c>true</c> if [use parameter2]; otherwise, <c>false</c>.</value>
            <remarks>This is needed when referencing anonymous parameters.</remarks>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.SqlBuilder`1">
            <summary>Class SqlBuilder. This class cannot be inherited.</summary>
            <typeparam name="TDbType">The type of the database type.</typeparam>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilder`1.HasReadFields">
            <summary>
            Gets a value indicating whether this instance has fields marked for reading.
            </summary>
            <value>
            <c>true</c> if this instance has read fields; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.SqlBuilder`1.StrictMode">
            <summary>
            Gets a value indicating whether strict mode is enabled
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyAnonymousFilterValue(System.Object,Tortuga.Chain.FilterOptions,System.Boolean)">
            <summary>
            Applies the filter value, returning a set of expressions suitable for use in a WHERE clause.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <param name="useSecondSlot">if set to <c>true</c> uses the second parameter slot.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">filterValue - filterValue</exception>
            <exception cref="T:Tortuga.Chain.MappingException">
            </exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentValue(Tortuga.Chain.DataSources.IDataSource,Tortuga.Chain.AuditRules.OperationTypes,System.Object)">
            <summary>
            Applies the argument value.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationType">Type of the operation.</param>
            <param name="argumentValue">The value.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <remarks>If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentValue(Tortuga.Chain.DataSources.IDataSource,System.Object,Tortuga.Chain.InsertOptions)">
            <summary>
            Applies the argument value.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="argumentValue">The value.</param>
            <param name="options">The options.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <remarks>
            If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentValue(Tortuga.Chain.DataSources.IDataSource,System.Object,Tortuga.Chain.DeleteOptions)">
            <summary>
            Applies the argument value.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="argumentValue">The value.</param>
            <param name="options">The options.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <remarks>
            If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentValue(Tortuga.Chain.DataSources.IDataSource,System.Object,Tortuga.Chain.UpsertOptions)">
            <summary>
            Applies the argument value.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="argumentValue">The value.</param>
            <param name="options">The options.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <remarks>
            If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.
            If the object does not implement IPropertyChangeTracking, the changedPropertiesOnly flag has no effect.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentValue(Tortuga.Chain.DataSources.IDataSource,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Applies the argument value.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="argumentValue">The value.</param>
            <param name="options">The options.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <remarks>
            If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.
            If the object does not implement IPropertyChangeTracking and changedPropertiesOnly is set, an error will occur.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyDesiredColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Uses a desired columns enumeration to indicate which columns should be set to read-mode.
            </summary>
            <param name="desiredColumns">The desired columns. This also supports Materializer.NoColumns, Materializer.AutoSelectDesiredColumns, and Materializer.AllColumns.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no desired columns were actually part of the table or view. If strict mode, all desired columns must be found.</exception>
            <remarks>Calling this a second time will be additive with prior call.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyFilterValue(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Applies the filter value, returning a set of expressions suitable for use in a WHERE clause.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Tortuga.Chain.MappingException">
            </exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyRulesForSelect(Tortuga.Chain.DataSources.IDataSource)">
            <summary>
            Applies the audit rules for select operations.
            </summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyTableType(Tortuga.Chain.DataSources.IDataSource,Tortuga.Chain.AuditRules.OperationTypes,System.Collections.Generic.IEnumerable{Tortuga.Chain.Metadata.ISqlBuilderEntryDetails{`0}})">
            <summary>
            Applies a user defined table type as the argument.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationType">Type of the operation.</param>
            <param name="tableTypeColumns">The table type columns.</param>
            <exception cref="T:System.ArgumentNullException">
            dataSource
            or
            tableTypeColumns
            </exception>
            <exception cref="T:Tortuga.Chain.MappingException">None of the columns on the indicated user defined type could be matched to columns in {m_Name}.</exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.OverrideArgumentValue(Tortuga.Chain.DataSources.IDataSource,Tortuga.Chain.AuditRules.OperationTypes,System.Object)">
            <summary>
            Overrides the previous selected values with the values in the indicated object.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationType">The type of operation being performed.</param>
            <param name="argumentValue">The value.</param>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <remarks>This will not alter the IsPrimaryKey, Insert, or Update column settings.
            If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildAnonymousFromFunctionClause(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Builds FROM clause for a function.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildAnonymousSetClause(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Builds a list of assignments suitable for using in the SET clause of UPDATE statement. This does not include the actual SET keyword.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header. Usually not used.</param>
            <param name="prefix">An optional prefix for each column name.</param>
            <param name="footer">The optional footer. Usually not used.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildAnonymousSoftDeleteClause(System.Text.StringBuilder,System.String,Tortuga.Chain.DataSources.IDataSource,System.String)">
            <summary>
            Builds the soft delete clause.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="header">The header.</param>
            <param name="dataSource">The data source.</param>
            <param name="footer">The footer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildAnonymousValuesClause(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Builds a list of columns suitable for using in the VALUES clause of INSERT statement. This does not include the actual VALUES keyword.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header. Usually "VALUES  (".</param>
            <param name="footer">The optional footer. Usually just ")".</param>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildAnonymousWhereClause(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Builds the standard WHERE clause from Key columns.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header Usually "WHERE".</param>
            <param name="footer">The optional footer. Usually not used.</param>
            <param name="firstPassParameter">if set to true if this is a first pass parameter.</param>
            <exception cref="T:System.ArgumentNullException">sql - sql</exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildDeleteStatement(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Builds a complete select statement using the keys as a filter. This is mostly used in conjunction with an UPDATE or DELETE operation.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="tableName">Name of the table.</param>
            <param name="footer">Optional footer, usually the statement terminator (;).</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildFromFunctionClause(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Builds FROM clause for a function.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
            <param name="parameterPrefix">Prefix to apply to each parameter name.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildInsertClause(System.Text.StringBuilder,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Builds a list of columns suitable for using in an INSERT statement.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header. e.g. "INSERT tableName (".</param>
            <param name="prefix">An optional prefix for each column name.</param>
            <param name="footer">The optional footer. Usually just ")".</param>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildInsertStatement(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Builds a complete insert statement.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="tableName">Name of the table.</param>
            <param name="footer">The footer.</param>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildOrderByClause(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{Tortuga.Chain.SortExpression},System.String)">
            <summary>
            Builds an order by clause.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="header">The header.</param>
            <param name="sortExpressions">The sort expressions.</param>
            <param name="footer">The footer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildSelectByKeyStatement(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Builds a complete select statement using the keys as a filter. This is mostly used in conjunction with an UPDATE or DELETE operation.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="tableName">Name of the table.</param>
            <param name="footer">Optional footer, usually the statement terminator (;).</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildSelectClause(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Builds a list of columns suitable for using in a SELECT or OUTPUT statement.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header (e.g. "SELECT, OUTPUT).</param>
            <param name="prefix">An optional prefix for each column name.</param>
            <param name="footer">The optional footer.</param>
            <remarks>
            If no columns are marked for reading, the header and footer won't be emitted.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildSelectTvpForInsertClause(System.Text.StringBuilder,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Builds a list of columns suitable for using in a SELECT from @TableParameter clause.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header (e.g. "SELECT, OUTPUT).</param>
            <param name="prefix">An optional prefix for each column name.</param>
            <param name="footer">The optional footer.</param>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
            <remarks>
            If no columns are marked for reading, the header and footer won't be emitted.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildSetClause(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Builds a list of assignments suitable for using in the SET clause of UPDATE statement. This does not include the actual SET keyword.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header. Usually not used.</param>
            <param name="prefix">An optional prefix for each column name.</param>
            <param name="footer">The optional footer. Usually not used.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildSoftDeleteClause(System.Text.StringBuilder,System.String,Tortuga.Chain.DataSources.IDataSource,System.String)">
            <summary>
            Builds the soft delete clause.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="header">The header.</param>
            <param name="dataSource">The data source.</param>
            <param name="footer">The footer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildUpdateByKeyStatement(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Builds the complete update statement using primary keys.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="tableName">Name of the table.</param>
            <param name="footer">The footer.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildValuesClause``1(System.Text.StringBuilder,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.List{``0},Tortuga.Chain.CommandBuilders.ParameterBuilderCallback{``0,`0})">
            <summary>
            Builds a list of columns suitable for using in the VALUES clause of INSERT statement. This does not include the actual VALUES keyword.
            This will add the associated parameters to the parameters collection.
            </summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header. Usually "VALUES  (".</param>
            <param name="footer">The optional footer. Usually just ")".</param>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
            <param name="parameterSuffix">The parameter suffix. Must be unique for each row.</param>
            <param name="parameters">The parameter list to be updated.</param>
            <param name="parameterBuilder">The parameter builder.</param>
            <exception cref="T:System.ArgumentNullException">
            sql
            or
            value
            or
            parameters
            or
            parameterBuilder
            </exception>
            <remarks>Call OverrideArgumentValue before invoking this method</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildValuesClause(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Builds a list of columns suitable for using in the VALUES clause of INSERT statement. This does not include the actual VALUES keyword.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header. Usually "VALUES  (".</param>
            <param name="footer">The optional footer. Usually just ")".</param>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.BuildWhereClause(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Builds the standard WHERE clause from Key columns.
            This will mark key columns for use in parameter building.
            </summary>
            <param name="sql">The SQL being generated.</param>
            <param name="header">The optional header Usually "WHERE".</param>
            <param name="footer">The optional footer. Usually not used.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetFormalParameters">
            <summary>
            Gets every column with a ParameterValue.
            </summary>
            <returns>Each pair has the column's QuotedSqlName and SqlVariableName</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetInsertColumns(System.Boolean)">
            <summary>
            Gets the insert columns.
            </summary>
            <param name="includeIdentityColumn">Include the identity column. Used when performing an identity insert operation.</param>
            <returns>Each pair has the column's QuotedSqlName and SqlVariableName</returns>
            <remarks>This will mark the returned columns as participating in the parameter generation.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetKeyColumns">
            <summary>
            Gets the key columns.
            </summary>
            <returns>Each pair has the column's QuotedSqlName and SqlVariableName</returns>
            <remarks>This will mark the returned columns as participating in the parameter generation.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetKeyColumns2">
            <summary>
            Gets the key columns.
            </summary>
            <returns>Each pair has the column's QuotedSqlName and SqlVariableName</returns>
            <remarks>This will mark the returned columns as participating in the second pass of parameter generation.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetParameterizedColumns">
            <summary>
            Gets every column with a ParameterValue.
            </summary>
            <returns>Each pair has the column's QuotedSqlName and SqlVariableName</returns>
            <remarks>This will mark the returned columns as participating in the parameter generation.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetParameters``1(Tortuga.Chain.CommandBuilders.ParameterBuilderCallback{``0,`0})">
            <summary>
            Gets the parameters.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <param name="parameterBuilder">The parameter builder. This should set the parameter's database specific DbType property.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetParametersKeysLast``1(Tortuga.Chain.CommandBuilders.ParameterBuilderCallback{``0,`0})">
            <summary>
            Gets the parameters, but puts the keys last.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <param name="parameterBuilder">The parameter builder. This should set the parameter's database specific DbType property.</param>
            <returns></returns>
            <remarks>This is needed for positional parameters such as MS Access</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetSelectColumnDetails">
            <summary>
            Gets the select columns with metadata details.
            </summary>
            <returns>Each entry has the column's metadata</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetSelectColumns">
            <summary>
            Gets the select columns.
            </summary>
            <returns>Each entry has the column's QuotedSqlName</returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.GetUpdateColumns">
            <summary>
            Gets the update columns.
            </summary>
            <returns>Each pair has the column's QuotedSqlName and SqlVariableName</returns>
            <remarks>This will mark the returned columns as participating in the parameter generation.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.OverrideKeys(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Overrides the list of keys.
            </summary>
            <param name="keyColumns">The key columns in SqlName format. The column names should be normalized before calling this method.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.PrimaryKeyIsIdentity``1(System.Func{System.Nullable{`0},``0},System.Collections.Generic.List{``0}@)">
            <summary>
            Returns true is the primary key includes an identity column.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <param name="parameterBuilder">The parameter builder.</param>
            <param name="keyParameters">The key parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.Clone(System.Boolean)">
            <summary>
            Clones this instance so that you can modify it without affecting the cached original.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentDictionary(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Applies an argument dictionary, overriding any previously applied values.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no keys could be matched to a column. If strict mode, all keys must match columns.</exception>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyArgumentValue(Tortuga.Chain.DataSources.IDataSource,Tortuga.Chain.AuditRules.OperationTypes,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Applies the argument value.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationType">The operation type.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="useObjectDefinedKeys">if set to <c>true</c> use object defined keys.</param>
            <param name="changedPropertiesOnly">if set to <c>true</c> filter the update list according to IPropertyChangeTracking.ChangedProperties.</param>
            <exception cref="T:Tortuga.Chain.MappingException">This is thrown is no properties could be matched to a column. If strict mode, all properties must match columns.</exception>
            <exception cref="T:System.ArgumentNullException">value;value is null.</exception>
            <remarks>
            If the object implements IReadOnlyDictionary[string, object], ApplyArgumentDictionary will be implicitly called instead.
            If the object does not implement IPropertyChangeTracking and changedPropertiesOnly is set, an error will occur.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.SqlBuilder`1.ApplyRules(Tortuga.Chain.AuditRules.AuditRuleCollection,Tortuga.Chain.AuditRules.OperationTypes,System.Object,System.Object)">
            <summary>
            Applies the indicated rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="operationType">The type of operation.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="userValue">The user value.</param>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3">
            <summary>
            This is the base class for table style command builders such as FromTableOrView and FromTableValueFunction.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <typeparam name="TLimit">The type of the limit option.</typeparam>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2" />
            <seealso cref="T:Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder" />
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="P:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.DefaultLimitOption">
            <summary>
            Gets the default limit option.
            </summary>
            <value>
            The default limit options.
            </value>
            <remarks>For most data sources, this will be LimitOptions.Rows. </remarks>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.AsCount">
            <summary>
            Returns the row count using a <c>SELECT Count(*)</c> style query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.AsCount(System.String,System.Boolean)">
            <summary>
            Returns the row count for a given column. <c>SELECT Count(columnName)</c>
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="distinct">if set to <c>true</c> use <c>SELECT COUNT(DISTINCT columnName)</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithFilter(System.String)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithLimits(System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="take">Number of rows to take.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithLimits(System.Nullable{System.Int32},`2)">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithLimits(System.Nullable{System.Int32},`2,System.Int32)">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithSorting(System.Collections.Generic.IEnumerable{Tortuga.Chain.SortExpression})">
            <summary>
            Adds sorting to the command builder.
            </summary>
            <param name="sortExpressions">The sort expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.WithSorting(Tortuga.Chain.SortExpression[])">
            <summary>
            Adds sorting to the command builder
            </summary>
            <param name="sortExpressions">The sort expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.OnWithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32},`2,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.TableDbCommandBuilder`3.OnWithLimits(System.Nullable{System.Int32},System.Nullable{System.Int32},Tortuga.Chain.LimitOptions,System.Nullable{System.Int32})">
            <summary>
            Adds limits to the command builder.
            </summary>
            <param name="skip">The number of rows to skip.</param>
            <param name="take">Number of rows to take.</param>
            <param name="limitOptions">The limit options.</param>
            <param name="seed">The seed for repeatable reads. Only applies to random sampling</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2">
            <summary>
            This is the base class for command builders that perform set-based update operations.
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <seealso cref="T:Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder`2" />
            <seealso cref="T:Tortuga.Chain.CommandBuilders.IUpdateManyDbCommandBuilder" />
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2"/> class.</summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2.All">
            <summary>
            Applies this command to all rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2.WithFilter(System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2.WithFilter(System.String)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommandBuilders.UpdateManyDbCommandBuilder`2.WithFilter(System.String,System.Object)">
            <summary>
            Adds (or replaces) the filter on this command builder.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.CommandBuilders.MultiBatcher`1">
            <summary>
            MultiBatcher is used by InsertMultipleBatch to perform a series of batch inserts.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.CommonAppenders">
            <summary>
            Class CommonAppenders.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Cache``1(Tortuga.Chain.ILink{``0},System.String,Tortuga.Chain.CachePolicy)">
            <summary>
            Executes the previous link and caches the result.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="policy">Optional cache policy.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Cache``1(Tortuga.Chain.ILink{``0},System.Func{``0,System.String},Tortuga.Chain.CachePolicy)">
            <summary>
            Executes the previous link and caches the result.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKeyFunction">Function to generate cache keys.</param>
            <param name="policy">Optional cache policy.</param>
            <returns>ICacheLink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.CacheAllItems``2(Tortuga.Chain.ILink{``0},System.Func{``1,System.String},Tortuga.Chain.CachePolicy)">
            <summary>
            Caches all items in the result set.
            </summary>
            <typeparam name="TCollection">The type of the t collection.</typeparam>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKeyFunction">Function to generate cache keys.</param>
            <param name="policy">Optional cache policy.</param>
            <returns>ILink&lt;TCollection&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.InvalidateCache``1(Tortuga.Chain.ILink{``0},System.String)">
            <summary>
            Invalidates the cache.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKey">The cache key.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.InvalidateCache(Tortuga.Chain.CommandBuilders.IDbCommandBuilder,System.String)">
            <summary>
            Invalidates the cache.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="cacheKey">The cache key.</param>
            <returns>ILink.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``2(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.Func{``0,``1,System.Boolean},System.Func{``0,System.Collections.Generic.ICollection{``1}},Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="joinExpression">The expression used to test of a parent and child match.</param>
            <param name="targetCollectionExpression">The expression to get the collection on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``2(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.Func{``0,``1,System.Boolean},System.String,Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="joinExpression">The expression used to test of a parent and child match.</param>
            <param name="targetCollectionName">The name of the collection property on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``3(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.ICollection{``1}},Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <typeparam name="TKey">The type of the primary/foreign key.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="primaryKeyExpression">The expression to get the primary key from the parent object.</param>
            <param name="foreignKeyExpression">The expression to get the foreign key from the child object.</param>
            <param name="targetCollectionExpression">The expression to get the collection on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``3(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.Func{``0,``2},System.Func{``1,``2},System.String,Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <typeparam name="TKey">The type of the primary/foreign key.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="primaryKeyExpression">The expression to get the primary key from the parent object.</param>
            <param name="foreignKeyExpression">The expression to get the foreign key from the child object.</param>
            <param name="targetCollectionName">The name of the collection property on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``2(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.String,System.String,System.String,Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="primaryKeyName">The name of the property used to get the primary key from the parent object.</param>
            <param name="foreignKeyName">The name of the property used to get the foreign key from the child object.</param>
            <param name="targetCollectionName">The name of the collection property on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``2(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.String,System.String,Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="keyName">The name of the property used to get the primary key from the parent object and the foreign key from the child object.</param>
            <param name="targetCollectionName">The name of the collection property on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``3(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.String,System.String,System.String,Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <typeparam name="TKey">The type of the primary/foreign key.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="primaryKeyName">The name of the property used to get the primary key from the parent object.</param>
            <param name="foreignKeyName">The name of the property used to get the foreign key from the child object.</param>
            <param name="targetCollectionName">The name of the collection property on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.Join``3(Tortuga.Chain.ILink{System.Tuple{System.Collections.Generic.List{``0},System.Collections.Generic.List{``1}}},System.String,System.String,Tortuga.Chain.JoinOptions)">
            <summary>
            Joins a set of child objects to their parent objects.
            </summary>
            <typeparam name="T1">The type of the parent object.</typeparam>
            <typeparam name="T2">The type of the child object.</typeparam>
            <typeparam name="TKey">The type of the primary/foreign key.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="keyName">The name of the property used to get the primary key from the parent object and the foreign key from the child object.</param>
            <param name="targetCollectionName">The name of the collection property on the parent to add the child to.</param>
            <param name="joinOptions">The join options.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.NeverNull``1(Tortuga.Chain.ILink{``0})">
            <summary>
            Ensures that a null will never be returned.
            </summary>
            <param name="previousLink">The previous link.</param>
            <remarks>If the previous link returns a null, an exception is thrown instead.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.NeverNull``1(Tortuga.Chain.ILink{System.Nullable{``0}})">
            <summary>
            Ensures that a null will never be returned.
            </summary>
            <param name="previousLink">The previous link.</param>
            <remarks>If the previous link returns a null, an exception is thrown instead.</remarks>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.ReadOrCache``1(Tortuga.Chain.ILink{``0},System.String,Tortuga.Chain.CachePolicy)">
            <summary>
            Reads the cache. If the value isn't found, the execute the previous link and cache the result.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="policy">Optional cache policy.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.SetStrictMode``1(Tortuga.Chain.ILink{``0},System.Boolean)">
            <summary>
            Sets the strict mode, overriding the value set in the DataSource.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="strictMode">if set to <c>true</c> [strict mode].</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.SetTimeout``1(Tortuga.Chain.ILink{``0},System.TimeSpan)">
            <summary>
            Sets the command timeout, overriding the value set in the DataSource.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="previousLink">The previous link.</param>
            <param name="timeout">The timeout.</param>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.WithTracing``1(Tortuga.Chain.ILink{``0},System.IO.TextWriter)">
            <summary>
            Adds DB Command tracing. Information is send to the Debug stream.
            </summary>
            <param name="previousLink">The previous link.</param>
            <param name="stream">The stream.</param>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.WithTracingToConsole``1(Tortuga.Chain.ILink{``0})">
            <summary>
            Adds DB Command tracing. Information is send to the Debug stream.
            </summary>
            <param name="previousLink">The previous link.</param>
        </member>
        <member name="M:Tortuga.Chain.CommonAppenders.WithTracingToDebug``1(Tortuga.Chain.ILink{``0})">
            <summary>
            Adds DB Command tracing. Information is send to the Debug stream.
            </summary>
            <param name="previousLink">The previous link.</param>
        </member>
        <member name="T:Tortuga.Chain.Core.CacheReadResult`1">
            <summary>
            Lightweight alternative to a Tuple for reading from the cache asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tortuga.Chain.Core.CacheReadResult`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.CacheReadResult`1"/> struct.
            </summary>
            <param name="keyFound">if set to <c>true</c> [key found].</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Tortuga.Chain.Core.CacheReadResult`1.KeyFound">
            <summary>
            Gets a value indicating whether the key was found.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Core.CacheReadResult`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
            <remarks>Will be Default(T) is the key wasn't found.</remarks>
        </member>
        <member name="T:Tortuga.Chain.Core.CommandBuiltEventArgs">
            <summary>
            Class CommandBuiltEventArgs.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Core.CommandBuiltEventArgs.#ctor(System.Data.Common.DbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.CommandBuiltEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Tortuga.Chain.Core.CommandBuiltEventArgs.Command">
            <summary>
            Gets the command that was just built.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Core.CommandExecutedEventArgs">
            <summary>
            Class CommandExecutedEventArgs is fired .
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Tortuga.Chain.Core.CommandExecutedEventArgs.#ctor(System.Data.Common.DbCommand,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.CommandExecutedEventArgs" /> class.
            </summary>
            <param name="command">The command.</param>
            <param name="rowsAffected">The number of rows affected.</param>
        </member>
        <member name="P:Tortuga.Chain.Core.CommandExecutedEventArgs.Command">
            <summary>
            Gets the command that was just built.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Core.CommandExecutedEventArgs.RowsAffected">
            <summary>
            Gets the number of rows affected, if known.
            </summary>
            <value>The rows affected.</value>
        </member>
        <member name="T:Tortuga.Chain.Core.CommandExecutionToken`2">
            <summary>
            This class represents the actual preparation and execution of a command.
            </summary>
            <typeparam name="TCommand">The type of the command used.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <seealso cref="T:Tortuga.Chain.Core.ExecutionToken" />
        </member>
        <member name="M:Tortuga.Chain.Core.CommandExecutionToken`2.#ctor(Tortuga.Chain.DataSources.ICommandDataSource{`0,`1},System.String,System.String,System.Collections.Generic.IReadOnlyList{`1},System.Data.CommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.CommandExecutionToken`2"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationName">Name of the operation. This is used for logging.</param>
            <param name="commandText">The SQL to be executed.</param>
            <param name="parameters">The parameters.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="P:Tortuga.Chain.Core.CommandExecutionToken`2.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:Tortuga.Chain.Core.CommandExecutionToken`2.ApplyCommandOverrides(`0)">
            <summary>
            Applies the command overrides by calling OnBuildCommand, then firing the CommandBuilt event.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.CommandExecutionToken`2.Execute(Tortuga.Chain.Core.CommandImplementation{`0},System.Object)">
            <summary>
            Executes the specified implementation.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.CommandExecutionToken`2.ExecuteAsync(Tortuga.Chain.Core.CommandImplementationAsync{`0},System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes the specified implementation asynchronously.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.CommandExecutionToken`2.OnBuildCommand(`0)">
            <summary>
            Subclasses can override this method to change the command object after the command text and parameters are loaded.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Tortuga.Chain.Core.CommandImplementation`1">
            <summary>
            The implementation of an operation from a CommandBuilder.
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <param name="command">The command.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.Core.CommandImplementationAsync`1">
            <summary>
            The implementation of an operation from a CommandBuilder.
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <param name="command">The command.</param>
            <returns>Task&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.Core.ExecutionToken">
            <summary>
            This class represents the actual preparation and execution of a command.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Core.ExecutionToken.#ctor(Tortuga.Chain.DataSources.IDataSource,System.String,System.String,System.Data.CommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.ExecutionToken" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationName">Name of the operation.</param>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="E:Tortuga.Chain.Core.ExecutionToken.CommandBuilt">
            <summary>
            Occurs when a command has been built.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="E:Tortuga.Chain.Core.ExecutionToken.CommandExecuted">
            <summary>
            Occurs when a command has been built.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Core.ExecutionToken.CommandText">
            <summary>
            Gets the command text, which is usually SQL.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:Tortuga.Chain.Core.ExecutionToken.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:Tortuga.Chain.Core.ExecutionToken.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Tortuga.Chain.Core.ExecutionToken.OperationName">
            <summary>
            Gets the name of the operation being performed.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Core.ExecutionToken.RaiseCommandExecuted(System.Data.Common.DbCommand,System.Nullable{System.Int32})">
            <summary>
            Raises the command executed event.
            </summary>
            <param name="command">The command.</param>
            <param name="rowsAffected">The rows affected.</param>
        </member>
        <member name="T:Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs">
            <summary>
            This occurs just after an execution token is prepared.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs.#ctor(Tortuga.Chain.Core.ExecutionToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.CommandBuiltEventArgs" /> class.
            </summary>
            <param name="executionToken">The execution token.</param>
        </member>
        <member name="P:Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs.ExecutionToken">
            <summary>
            Gets the execution token.
            </summary>
            <value>The execution token.</value>
        </member>
        <member name="T:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs">
            <summary>
            This occurs just before an execution token is prepared.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="P:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs.CommandBuilder">
            <summary>
            Gets the command builder being used to generate the execution token.
            </summary>
            <value>
            The command builder.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Core.ICacheAdapter">
            <summary>
            Generic caching adapter.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.ClearAsync">
            <summary>
            Clears the cache asynchronously.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.Invalidate(System.String)">
            <summary>
            Invalidates the cache.
            </summary>
            <param name="cacheKey">The cache key.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.InvalidateAsync(System.String)">
            <summary>
            Invalidates the cache asynchronously.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.TryRead``1(System.String,``0@)">
            <summary>
            Tries the read from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey">The cache key.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.TryReadAsync``1(System.String)">
            <summary>
            Tries the read from cache asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey">The cache key.</param>
            <returns>Task&lt;Tuple&lt;System.Boolean, System.Object&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.Write(System.String,System.Object,Tortuga.Chain.CachePolicy)">
            <summary>
            Writes to cache.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="value">The value.</param>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.ICacheAdapter.WriteAsync(System.String,System.Object,Tortuga.Chain.CachePolicy)">
            <summary>
            Writes to cache asynchronously.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="value">The value.</param>
            <param name="policy">The policy.</param>
            <returns>
            Task.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.Core.ObjectCacheAdapter">
            <summary>
            Class ObjectCacheAdapter.
            </summary>
            <seealso cref="T:Tortuga.Chain.Core.ICacheAdapter" />
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.#ctor(System.Runtime.Caching.ObjectCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.ObjectCacheAdapter"/> class.
            </summary>
            <param name="objectCache">The object cache.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.ClearAsync">
            <summary>
            Clears the cache asynchronously.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.Invalidate(System.String)">
            <summary>
            Invalidates the cache.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.InvalidateAsync(System.String)">
            <summary>
            Invalidates the cache asynchronously.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.TryRead``1(System.String,``0@)">
            <summary>
            Tries the read from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey">The cache key.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.TryReadAsync``1(System.String)">
            <summary>
            try read from cache as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey">The cache key.</param>
            <returns>Task&lt;Tuple&lt;System.Boolean, System.Object&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.Write(System.String,System.Object,Tortuga.Chain.CachePolicy)">
            <summary>
            Writes to cache.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="value">The value.</param>
            <param name="policy">The policy.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Tortuga.Chain.Core.ObjectCacheAdapter.WriteAsync(System.String,System.Object,Tortuga.Chain.CachePolicy)">
            <summary>
            Writes to cache asynchronously.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="value">The value.</param>
            <param name="policy">The policy.</param>
            <returns>
            Task.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.Core.OperationExecutionToken`2">
            <summary>
            This class represents the actual preparation and execution of a operation that isn't dependent on a DbCommand.
            </summary>
            <typeparam name="TConnection">The type of the t connection.</typeparam>
            <typeparam name="TTransaction">The type of the t transaction.</typeparam>
            <seealso cref="T:Tortuga.Chain.Core.ExecutionToken" />
        </member>
        <member name="M:Tortuga.Chain.Core.OperationExecutionToken`2.#ctor(Tortuga.Chain.DataSources.IOperationDataSource{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Core.OperationExecutionToken`2"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="operationName">Name of the operation. This is used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.OperationExecutionToken`2.Execute(Tortuga.Chain.Core.OperationImplementation{`0,`1},System.Object)">
            <summary>
            Executes the specified implementation.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.Core.OperationExecutionToken`2.ExecuteAsync(Tortuga.Chain.Core.OperationImplementationAsync{`0,`1},System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes the specified implementation asynchronously.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Tortuga.Chain.Core.OperationImplementation`2">
            <summary>
            The implementation of an operation from an OperationBuilder.
            </summary>
            <typeparam name="TConnection">The type of the connection.</typeparam>
            <typeparam name="TTransaction">The type of the transaction.</typeparam>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.Core.OperationImplementationAsync`2">
            <summary>
            The implementation of an operation from an OperationBuilder.
            </summary>
            <typeparam name="TConnection">The type of the connection.</typeparam>
            <typeparam name="TTransaction">The type of the transaction.</typeparam>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.DataSource">
            <summary>
            Class DataSource.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.#ctor(Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.DataSources.DataSource"/> class.
            </summary>
            <param name="settings">Optional settings object.</param>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.GlobalExecutionCanceled">
            <summary>
            Raised when a executionDetails is canceled in any dispatcher.
            </summary>
            <remarks>This is not used for timeouts.</remarks>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.GlobalExecutionError">
            <summary>
            Raised when a procedure call fails in any dispatcher.
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.GlobalExecutionFinished">
            <summary>
            Raised when a procedure call is successfully completed in any dispatcher
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.GlobalExecutionStarted">
            <summary>
            Raised when a procedure call is started in any dispatcher
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.ExecutionCanceled">
            <summary>
            Raised when a executionDetails is canceled.
            </summary>
            <remarks>This is not used for timeouts.</remarks>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.ExecutionError">
            <summary>
            Raised when a procedure call fails.
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.ExecutionFinished">
            <summary>
            Raised when a procedure call is successfully completed
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.DataSource.ExecutionStarted">
            <summary>
            Raised when a procedure call is started
            </summary>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.AuditRules">
            <summary>
            Gets or sets the audit rules.
            </summary>
            <value>
            The audit rules.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.Cache">
            <summary>
            Gets or sets the cache to be used by this data source. The default is .NET's System.Runtime.Caching.MemoryCache.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.DatabaseMetadata">
            <summary>
            Gets the database metadata.
            </summary>
            <value>
            The database metadata.
            </value>
            <remarks>Data sources are expected to shadow this with their specific version.</remarks>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
            <value>The default command timeout.</value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.Name">
            <summary>
            Gets the name of the data source.
            </summary>
            <value>
            The name of the data source.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.StrictMode">
            <summary>
            Gets or sets a value indicating whether strict mode is enabled.
            </summary>
            <remarks>Strict mode requires all properties that don't represent columns to be marked with the NotMapped attribute.</remarks>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.SuppressGlobalEvents">
            <summary>
            Gets or sets a value indicating whether to suppress global events.
            </summary>
            <value>If <c>true</c>, this data source will not honor global event handlers.</value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.UserValue">
            <summary>
            Gets or sets the user value to use with audit rules.
            </summary>
            <value>
            The user value.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.DefaultCache">
            <summary>
            Gets the default cache.
            </summary>
            <value>
            The default cache.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSource.ExtensionCache">
            <summary>
            The extension cache is used by extensions to store data source specific information.
            </summary>
            <value>The extension cache.</value>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.GetExtensionData``1">
            <summary>
            Gets the extension data.
            </summary>
            <typeparam name="TTKey">The type of extension data desired.</typeparam>
            <returns>T.</returns>
            <remarks><para>Chain extensions can use this to store data source specific data. The key should be a data type defined by the extension.</para>
            <para>Transactional data sources should override this method and return the value held by their parent data source.</para></remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionCanceled(Tortuga.Chain.ExecutionEventArgs)">
            <summary>
            Raises the <see cref="E:Tortuga.Chain.DataSources.DataSource.ExecutionCanceled" /> event.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e - e is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionError(Tortuga.Chain.ExecutionEventArgs)">
            <summary>
            Raises the <see cref="E:Tortuga.Chain.DataSources.DataSource.ExecutionError" /> event.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e - e is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionFinished(Tortuga.Chain.ExecutionEventArgs)">
            <summary>
            Raises the <see cref="E:Tortuga.Chain.DataSources.DataSource.ExecutionFinished" /> event.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e - e is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionStarted(Tortuga.Chain.ExecutionEventArgs)">
            <summary>
            Raises the <see cref="E:Tortuga.Chain.DataSources.DataSource.ExecutionStarted" /> event.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e - e is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.TestConnectionAsync">
            <summary>
            Tests the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionCanceled(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.DateTimeOffset,System.Object)">
            <summary>
            Data sources can use this to indicate an executionDetails was canceled.
            </summary>
            <param name="executionDetails">The executionDetails.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails - executionDetails is null.</exception>
            <remarks>This is not used for timeouts.</remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionError(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.DateTimeOffset,System.Exception,System.Object)">
            <summary>
            Data sources can use this to indicate an error has occurred.
            </summary>
            <param name="executionDetails">The executionDetails.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="error">The error.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails - executionDetails is null.
            or
            error - error is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionFinished(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.DateTimeOffset,System.Nullable{System.Int32},System.Object)">
            <summary>
            Data sources can use this to indicate an executionDetails has finished.
            </summary>
            <param name="executionDetails">The executionDetails.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="rowsAffected">The number of rows affected.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails - executionDetails is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnExecutionStarted(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.Object)">
            <summary>
            Data sources can use this to indicate an executionDetails has begun.
            </summary>
            <param name="executionDetails">The executionDetails.</param>
            <param name="startTime">The start time.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails - executionDetails is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.OnGetDatabaseMetadata">
            <summary>
            Called when Database.DatabaseMetadata is invoked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource.CreateMultiBatcher``1(System.Func{System.Collections.Generic.IReadOnlyList{``0},Tortuga.Chain.ILink{System.Int32}},System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            Creates a multi-batcher. This is used by InsertMultipleBatch;
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="callBack">The call back used to insert the batch.</param>
            <param name="objects">The objects to insert.</param>
            <param name="batchSize">Size of the batch.</param>
            <returns>ILink&lt;System.Int32&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.DataSourceSettings">
            <summary>
            This class is used to modify settings that are not represented by the connection string.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSourceSettings.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
            <value>The default command timeout.</value>
            <remarks>Leave null to inherit settings from the parent data source.</remarks>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSourceSettings.StrictMode">
            <summary>
            Gets or sets a value indicating whether strict mode is enabled.
            </summary>
            <remarks>Strict mode requires all properties that don't represent columns to be marked with the NotMapped attribute.
            Leave null to inherit settings from the parent data source.</remarks>
        </member>
        <member name="P:Tortuga.Chain.DataSources.DataSourceSettings.SuppressGlobalEvents">
            <summary>
            Gets or sets a value indicating whether to suppress global events.
            </summary>
            <value>If <c>true</c>, this data source will not honor global event handlers.</value>
            <remarks>Leave null to inherit settings from the parent data source.</remarks>
        </member>
        <member name="T:Tortuga.Chain.DataSources.DataSource`4">
            <summary>
            Class DataSource.
            </summary>
            <typeparam name="TConnection">The type of the t connection.</typeparam>
            <typeparam name="TTransaction">The type of the t transaction.</typeparam>
            <typeparam name="TCommand">The type of the command used.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <seealso cref="T:Tortuga.Chain.DataSources.DataSource" />
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource`4.#ctor(Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.DataSources.DataSource`4"/> class.
            </summary>
            <param name="settings">Optional settings object.</param>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource`4.Execute(Tortuga.Chain.Core.CommandExecutionToken{`2,`3},Tortuga.Chain.Core.CommandImplementation{`2},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="state">User supplied state.</param>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource`4.Execute(Tortuga.Chain.Core.OperationExecutionToken{`0,`1},Tortuga.Chain.Core.OperationImplementation{`0,`1},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource`4.ExecuteAsync(Tortuga.Chain.Core.CommandExecutionToken{`2,`3},Tortuga.Chain.Core.CommandImplementationAsync{`2},System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User supplied state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.DataSources.DataSource`4.ExecuteAsync(Tortuga.Chain.Core.OperationExecutionToken{`0,`1},Tortuga.Chain.Core.OperationImplementationAsync{`0,`1},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.ICommandDataSource`2">
            <summary>
            This interface exposes the execute command methods.
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <seealso cref="T:Tortuga.Chain.DataSources.IDataSource" />
            <remarks>This is for internal use only.</remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.ICommandDataSource`2.Execute(Tortuga.Chain.Core.CommandExecutionToken{`0,`1},Tortuga.Chain.Core.CommandImplementation{`0},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="state">User supplied state.</param>
        </member>
        <member name="M:Tortuga.Chain.DataSources.ICommandDataSource`2.ExecuteAsync(Tortuga.Chain.Core.CommandExecutionToken{`0,`1},Tortuga.Chain.Core.CommandImplementationAsync{`0},System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User supplied state.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.IDataSource">
            <summary>
            Interface IDataSource is used to expose a data source to appenders.
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.IDataSource.ExecutionCanceled">
            <summary>
            Raised when a executionDetails is canceled.
            </summary>
            <remarks>This is not used for timeouts.</remarks>
        </member>
        <member name="E:Tortuga.Chain.DataSources.IDataSource.ExecutionError">
            <summary>
            Raised when a procedure call fails.
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.IDataSource.ExecutionFinished">
            <summary>
            Raised when a procedure call is successfully completed
            </summary>
        </member>
        <member name="E:Tortuga.Chain.DataSources.IDataSource.ExecutionStarted">
            <summary>
            Raised when a procedure call is started
            </summary>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IDataSource.AuditRules">
            <summary>
            Gets or sets the audit rules.
            </summary>
            <value>
            The audit rules.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IDataSource.Cache">
            <summary>
            Gets or sets the cache to be used by this data source. The default is .NET's System.Runtime.Caching.MemoryCache.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IDataSource.DatabaseMetadata">
            <summary>
            Gets the database metadata.
            </summary>
            <value>
            The database metadata.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IDataSource.Name">
            <summary>
            Gets the name of the data source.
            </summary>
            <value>
            The name of the data source.
            </value>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IDataSource.StrictMode">
            <summary>
            Gets or sets a value indicating whether strict mode is enabled.
            </summary>
            <remarks>Strict mode requires all properties that don't represent columns to be marked with the NotMapped attribute.</remarks>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IDataSource.UserValue">
            <summary>
            Gets or sets the user value to use with audit rules.
            </summary>
            <value>
            The user value.
            </value>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IDataSource.GetExtensionData``1">
            <summary>
            Gets the extension data.
            </summary>
            <typeparam name="TTKey">The type of extension data desired.</typeparam>
            <returns>T.</returns>
            <remarks>Chain extensions can use this to store data source specific data. The key should be a data type defined by the extension.</remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IDataSource.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IDataSource.TestConnectionAsync">
            <summary>
            Tests the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.IOpenDataSource">
            <summary>
            This represents a data source that wraps a connection, and optional transaction, that it does not own.
            </summary>
            <remarks>
            This interface is primarily for testing purposes.
            </remarks>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IOpenDataSource.AssociatedConnection">
            <summary>
            Returns the associated connection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.DataSources.IOpenDataSource.AssociatedTransaction">
            <summary>
            Returns the associated transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IOpenDataSource.Close">
            <summary>
            Closes the connection and transaction associated with this data source.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IOpenDataSource.TryCommit">
            <summary>
            Tries the commit the transaction associated with this data source.
            </summary>
            <returns>True if there was an open transaction associated with this data source, otherwise false.</returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.IOperationDataSource`2">
            <summary>
            This interface exposes the execute operation methods.
            </summary>
            <typeparam name="TConnection">The type of the t connection.</typeparam>
            <typeparam name="TTransaction">The type of the t transaction.</typeparam>
            <seealso cref="T:Tortuga.Chain.DataSources.IDataSource" />
            <remarks>This is for internal use only.</remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IOperationDataSource`2.Execute(Tortuga.Chain.Core.OperationExecutionToken{`0,`1},Tortuga.Chain.Core.OperationImplementation{`0,`1},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IOperationDataSource`2.ExecuteAsync(Tortuga.Chain.Core.OperationExecutionToken{`0,`1},Tortuga.Chain.Core.OperationImplementationAsync{`0,`1},System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.IRootDataSource">
            <summary>
            This is a data source from which other data sources can be created.
            </summary>
            <remarks>
            This interface is primarily for testing purposes.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IRootDataSource.BeginTransaction">
            <summary>
            Begin a transaction using the default settings
            </summary>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IRootDataSource.BeginTransactionAsync">
            <summary>
            Begin a transaction using the default settings
            </summary>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IRootDataSource.CreateConnection">
            <summary>
            Creates and opens a connection.
            </summary>
            <returns></returns>
            <remarks>WARNING: The caller of this method is responsible for closing the connection.</remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IRootDataSource.CreateConnectionAsync">
            <summary>
            Creates and opens a connection asynchronously.
            </summary>
            <returns></returns>
            <remarks>WARNING: The caller of this method is responsible for closing the connection.</remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IRootDataSource.CreateOpenDataSource(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Creates an open data source using the supplied connection and optional transaction.
            </summary>
            <param name="connection">The connection to wrap.</param>
            <param name="transaction">The transaction to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.DataSources.IRootDataSource.CreateOpenDataSource(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Creates an open data source using the supplied connection and optional transaction.
            </summary>
            <param name="connection">The connection to wrap.</param>
            <param name="transaction">The transaction to wrap.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.DataSources.ITransactionalDataSource">
            <summary>
            This is data source that is wrapped around a managed connection.
            </summary>
            <remarks>
            This interface is primarily for testing purposes.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.DataSources.ITransactionalDataSource.Commit">
            <summary>
            Commits this transaction.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.DeleteOptions">
            <summary>
            Controls what happens when performing a model-based delete
            </summary>
        </member>
        <member name="F:Tortuga.Chain.DeleteOptions.None">
            <summary>
            Use the primary key columns for the where clause.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.DeleteOptions.UseKeyAttribute">
            <summary>
            Ignore the primary keys on the table and perform the delete using the Key attribute on properties to construct the where clause.
            </summary>
            <remarks>This is generally used for heap-style tables, though technically heap tables may have primary, non-clustered keys.</remarks>
        </member>
        <member name="T:Tortuga.Chain.DictionaryOptions">
            <summary>
            Options for populating dictionaries.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.DictionaryOptions.None">
            <summary>
            Use the default behavior.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.DictionaryOptions.InferConstructor">
            <summary>
            Infer which constructor to use. When this option is chosen, individual properties will not be set.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.DictionaryOptions.DiscardDuplicates">
            <summary>
            If two rows have the same key, no error will be raised. This option is not compatible with immutable dictionaries.
            </summary>
            <remarks>This option uses IDictionary.Item[] instead of IDictionary.Add().</remarks>
        </member>
        <member name="T:Tortuga.Chain.ExecutionEventArgs">
            <summary>
            Events indicating the activities performed by a given datasource.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.ExecutionEventArgs.#ctor(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> class.
            </summary>
            <param name="executionDetails">The execution details.</param>
            <param name="startTime">The start time.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails;executionDetails is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.ExecutionEventArgs.#ctor(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.DateTimeOffset,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> class.
            </summary>
            <param name="executionDetails">The execution details.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails;executionDetails is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.ExecutionEventArgs.#ctor(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.DateTimeOffset,System.Nullable{System.Int32},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> class.
            </summary>
            <param name="executionDetails">The execution details.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="rowsAffected">The number of rows affected.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails;executionDetails is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.ExecutionEventArgs.#ctor(Tortuga.Chain.Core.ExecutionToken,System.DateTimeOffset,System.DateTimeOffset,System.Exception,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.ExecutionEventArgs" /> class.
            </summary>
            <param name="executionDetails">The execution details.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="error">The error.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <exception cref="T:System.ArgumentNullException">executionDetails;executionDetails is null.</exception>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.Duration">
            <summary>
            Gets the duration of the request, if available.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.EndTime">
            <summary>
            Gets the end time.
            </summary>
            <value>
            The end time.
            </value>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.ExecutionDetails">
            <summary>
            Gets the details of the execution.
            </summary>
            <value>Returns null or details of the execution.</value>
            <remarks>You can cast this to a concrete type for more information.</remarks>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.RowsAffected">
            <summary>
            If available, this shows the number of rows affected by the execution.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:Tortuga.Chain.ExecutionEventArgs.State">
            <summary>
            Gets the user-defined state.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.FilterOptions">
            <summary>
            Enum FilterOptions
            </summary>
        </member>
        <member name="F:Tortuga.Chain.FilterOptions.None">
            <summary>
            The properties that are null will be used when constructing a WHERE clause. (e.g. "ColumnName IS NULL")
            </summary>
        </member>
        <member name="F:Tortuga.Chain.FilterOptions.IgnoreNullProperties">
            <summary>
            The ignore properties that are null when constructing a WHERE clause.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.GenericDbDataSource">
            <summary>
            The GenericDbDataSource is the most simplistic of all of the data sources. The command builder only supports raw SQL, but you still have access to all of the materializers.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.#ctor(System.Data.Common.DbProviderFactory,System.String,System.String,Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.GenericDbDataSource`3" /> class.
            </summary>
            <param name="factory">The factory used to get provider specific objects.</param>
            <param name="name">Name of the data source.</param>
            <param name="connectionString">The connection string.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentException">connectionString is null or empty.;connectionString</exception>
            <exception cref="T:System.ArgumentException">connectionString is null or empty.;connectionString</exception>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.#ctor(System.Data.Common.DbProviderFactory,System.String,System.Data.Common.DbConnectionStringBuilder,Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.GenericDbDataSource" /> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="name">The name.</param>
            <param name="connectionStringBuilder">The connection string builder.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentNullException">factory;factory is null.
            or
            connectionStringBuilder;connectionStringBuilder is null.</exception>
        </member>
        <member name="P:Tortuga.Chain.GenericDbDataSource.Cache">
            <summary>
            Gets or sets the cache to be used by this data source. The default is .NET's System.Runtime.Caching.MemoryCache.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.GenericDbDataSource.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:Tortuga.Chain.GenericDbDataSource.ExtensionCache">
            <summary>
            The extension cache is used by extensions to store data source specific information.
            </summary>
            <value>
            The extension cache.
            </value>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.CreateConnection">
            <summary>
            Creates and opens a SQL connection.
            </summary>
            <returns></returns>
            <remarks>The caller of this method is responsible for closing the connection.</remarks>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.CreateConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Creates and opens a SQL connection.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <remarks>
            The caller of this method is responsible for closing the connection.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.Sql(System.String)">
            <summary>
            Creates a operation based on a raw SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.Sql(System.String,System.Object)">
            <summary>
            Creates a operation based on a raw SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="argumentValue">The argument value.</param>
            <returns>SqlServerSqlCall.</returns>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.TestConnectionAsync">
            <summary>
            Tests the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.OnCreateConnection">
            <summary>
            Creates an empty connection to be populated by CreateConnection.
            </summary>
            <returns>DbConnection.</returns>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.Execute(Tortuga.Chain.Core.CommandExecutionToken{System.Data.Common.DbCommand,System.Data.Common.DbParameter},Tortuga.Chain.Core.CommandImplementation{System.Data.Common.DbCommand},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="state">User supplied state.</param>
            <exception cref="T:System.ArgumentNullException">
            executionToken;executionToken is null.
            or
            implementation;implementation is null.
            </exception>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.Execute(Tortuga.Chain.Core.OperationExecutionToken{System.Data.Common.DbConnection,System.Data.Common.DbTransaction},Tortuga.Chain.Core.OperationImplementation{System.Data.Common.DbConnection,System.Data.Common.DbTransaction},System.Object)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
            <exception cref="T:System.ArgumentNullException">
            executionToken;executionToken is null.
            or
            implementation;implementation is null.
            </exception>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.ExecuteAsync(Tortuga.Chain.Core.CommandExecutionToken{System.Data.Common.DbCommand,System.Data.Common.DbParameter},Tortuga.Chain.Core.CommandImplementationAsync{System.Data.Common.DbCommand},System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes the operation asynchronously.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation that handles processing the result of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User supplied state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.ExecuteAsync(Tortuga.Chain.Core.OperationExecutionToken{System.Data.Common.DbConnection,System.Data.Common.DbTransaction},Tortuga.Chain.Core.OperationImplementationAsync{System.Data.Common.DbConnection,System.Data.Common.DbTransaction},System.Threading.CancellationToken,System.Object)">
            <summary>
            execute as an asynchronous operation.
            </summary>
            <param name="executionToken">The execution token.</param>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource.OnGetDatabaseMetadata">
            <summary>
            Called when Database.DatabaseMetadata is invoked.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.GenericDbDataSource`3">
            <summary>
            The GenericDbDataSource is the most simplistic of all of the data sources. The command builder only supports raw SQL, but you still have access to all of the materializers.
            </summary>
            <typeparam name="TConnection">The type of the t connection.</typeparam>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource`3.#ctor(System.String,System.String,Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.GenericDbDataSource`3"/> class.
            </summary>
            <param name="name">Name of the data source.</param>
            <param name="connectionString">The connection string.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentException">connectionString is null or empty.;connectionString</exception>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource`3.#ctor(System.String,Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.GenericDbDataSource`3"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentException">connectionString is null or empty.;connectionString</exception>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource`3.#ctor(System.String,System.Data.Common.DbConnectionStringBuilder,Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.GenericDbDataSource`3"/> class.
            </summary>
            <param name="name">Optional name of the data source.</param>
            <param name="connectionStringBuilder">The connection string builder.</param>
            <param name="settings">Optional settings object.</param>
            <exception cref="T:System.ArgumentNullException">connectionStringBuilder;connectionStringBuilder is null.</exception>
        </member>
        <member name="M:Tortuga.Chain.GenericDbDataSource`3.#ctor(System.Data.Common.DbConnectionStringBuilder,Tortuga.Chain.DataSources.DataSourceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.GenericDbDataSource`3"/> class.
            </summary>
            <param name="connectionStringBuilder">The connection string builder.</param>
            <param name="settings">Optional settings object.</param>
        </member>
        <member name="T:Tortuga.Chain.ICacheLink`1">
            <summary>
            This represents an appender that includes a caching capability.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.ICacheLink`1.Invalidate">
            <summary>
            Instructs the appender to invalidate any cache keys that it created or updated.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.IClass0DataSource">
            <summary>
            This indicates that the data source provides minimal functionality.
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new methods will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass0DataSource.Sql(System.String,System.Object)">
            <summary>
            Creates a operation based on a raw SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="argumentValue">The argument value.</param>
        </member>
        <member name="T:Tortuga.Chain.IClass1DataSource">
            <summary>
            A class 1 data source supports basic CRUD operations. This is the bare minimum needed to implement the repository pattern.
            </summary>
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new methods will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Delete``1(System.String,``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete an object model from the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The delete options.</param>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Delete``1(``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete an object model from the table indicated by the class's Table attribute.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The delete options.</param>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.DeleteByKey``1(System.String,``0,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete by key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>ISingleRowDbCommandBuilder.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.DeleteByKey(System.String,System.String,Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete by key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>ISingleRowDbCommandBuilder.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.DeleteByKeyList``1(System.String,System.Collections.Generic.IEnumerable{``0},Tortuga.Chain.DeleteOptions)">
            <summary>
            Delete by key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <param name="options">The options.</param>
            <returns>IMultipleRowDbCommandBuilder.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.DeleteWithFilter(System.String,System.String)">
            <summary>
            Delete multiple records using a where expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
            <returns>IMultipleRowDbCommandBuilder.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.DeleteWithFilter(System.String,System.String,System.Object)">
            <summary>
            Delete multiple records using a where expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereClause">The where clause.</param>
            <param name="argumentValue">The argument value for the where clause.</param>
            <returns>IMultipleRowDbCommandBuilder.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.DeleteWithFilter(System.String,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            Delete multiple records using a filter object.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="filterValue">The filter value.</param>
            <param name="filterOptions">The filter options.</param>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From(System.String)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <exception cref="T:System.ArgumentException">
            tableName is empty.;tableName
            or
            Table or view named + tableName +  could not be found. Check to see if the user has permissions to execute this procedure.
            </exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From(System.String,System.String)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <exception cref="T:System.ArgumentException">tableOrViewName is empty.;tableOrViewName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From(System.String,System.String,System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <param name="argumentValue">Optional argument value. Every property in the argument value must have a matching parameter in the WHERE clause</param>
            <exception cref="T:System.ArgumentException">tableOrViewName is empty.;tableOrViewName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From(System.String,System.Object,Tortuga.Chain.FilterOptions)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <param name="tableOrViewName">Name of the table or view.</param>
            <param name="filterValue">The filter value is used to generate a simple AND style WHERE clause.</param>
            <param name="filterOptions">The filter options.</param>
            <returns>ITableDbCommandBuilder.</returns>
            <exception cref="T:System.ArgumentException">tableOrViewName is empty.;tableOrViewName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From``1">
            <summary>
            This is used to directly query a table or view.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From``1(System.String)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From``1(System.String,System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
            <param name="argumentValue">Optional argument value. Every property in the argument value must have a matching parameter in the WHERE clause</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.From``1(System.Object)">
            <summary>
            This is used to directly query a table or view.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="filterValue">The filter value is used to generate a simple AND style WHERE clause.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.GetByKey``1(System.String,``0)">
            <summary>
            Gets a record by its primary key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <remarks>This only works on tables that have a scalar primary key.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.GetByKey(System.String,System.String)">
            <summary>
            Gets a record by its primary key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <remarks>This only works on tables that have a scalar primary key.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.GetByKeyList``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a set of records by their primary key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
            <remarks>This only works on tables that have a scalar primary key.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.GetByKeyList``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Gets a set of records by an unique key.</summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="keyColumn">Name of the key column. This should be a primary or unique key, but that's not enforced.</param>
            <param name="keys">The keys.</param>
            <returns>IMultipleRowDbCommandBuilder.</returns>
            <remarks>This only works on tables that have a scalar primary key.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Insert``1(System.String,``0,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts an object into the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert occurs.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Insert``1(``0,Tortuga.Chain.InsertOptions)">
            <summary>
            Inserts an object into the specified table.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert occurs.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Update``1(System.String,``0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update an object in the specified table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The update options.</param>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Update``1(``0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update an object in the specified table.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The update options.</param>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.UpdateByKey``2(System.String,``0,``1,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.UpdateByKey``1(System.String,``0,System.String,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update a record by its primary key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="key">The key.</param>
            <param name="options">The options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.UpdateByKeyList``2(System.String,``0,System.Collections.Generic.IEnumerable{``1},Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple rows by key.
            </summary>
            <typeparam name="TArgument">The type of the t argument.</typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="keys">The keys.</param>
            <param name="options">Update options.</param>
            <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException"></exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.UpdateSet(System.String,System.String,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="options">The update options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.UpdateSet(System.String,System.String,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update expression.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="updateArgumentValue">The argument for the update expression.</param>
            <param name="options">The update options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.UpdateSet(System.String,System.Object,Tortuga.Chain.UpdateOptions)">
            <summary>
            Update multiple records using an update value.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="newValues">The new values to use.</param>
            <param name="options">The options.</param>
            <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Upsert``1(System.String,``0,Tortuga.Chain.UpsertOptions)">
            <summary>
            Perform an insert or update operation as appropriate.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert/update occurs.</param>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="M:Tortuga.Chain.IClass1DataSource.Upsert``1(``0,Tortuga.Chain.UpsertOptions)">
            <summary>
            Perform an insert or update operation as appropriate.
            </summary>
            <param name="argumentValue">The argument value.</param>
            <param name="options">The options for how the insert/update occurs.</param>
            <exception cref="T:System.ArgumentException">tableName is empty.;tableName</exception>
        </member>
        <member name="T:Tortuga.Chain.IClass2DataSource">
            <summary>
            A class 2 data source that includes stored procedures and functions.
            </summary>
            <seealso cref="T:Tortuga.Chain.IClass1DataSource" />
            <remarks>Warning: This interface is meant to simulate multiple inheritance and work-around some issues with exposing generic types. Do not implement it in client code, as new methods will be added over time.</remarks>
        </member>
        <member name="M:Tortuga.Chain.IClass2DataSource.Procedure(System.String)">
            <summary>
            Executes the indicated procedure.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass2DataSource.Procedure(System.String,System.Object)">
            <summary>
            Executes the indicated procedure.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass2DataSource.ScalarFunction(System.String)">
            <summary>
            This is used to query a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass2DataSource.ScalarFunction(System.String,System.Object)">
            <summary>
            This is used to query a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <param name="functionArgumentValue">The function arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass2DataSource.TableFunction(System.String)">
            <summary>
            Selects from the indicated table-value function.
            </summary>
            <param name="functionName">Name of the function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.IClass2DataSource.TableFunction(System.String,System.Object)">
            <summary>
            Selects from the indicated table-value function.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="functionArgumentValue">The function argument value.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.IConstructibleMaterializer`1">
            <summary>
            This interface denotes an materializer that allows overriding the constructor logic. This
            includes the ability to limit the list of columns being populated.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <seealso cref="T:Tortuga.Chain.ILink`1"/>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithProperties(System.String[])">
            <summary>
            Limits the list of properties to populate to just the indicated list.
            </summary>
            <param name="propertiesToPopulate">The properties of the object to populate.</param>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.ExceptProperties(System.String[])">
            <summary>
            Excludes the properties from the list of what will be populated in the object.
            </summary>
            <param name="propertiesToOmit">The properties to omit.</param>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor(System.Type[])">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <param name="constructorSignature">The constructor signature.</param>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``1">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``2">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``3">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``4">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``5">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <typeparam name="T5">The type of the 5th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``6">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <typeparam name="T5">The type of the 5th constructor parameter.</typeparam>
            <typeparam name="T6">The type of the 6th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``7">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <typeparam name="T5">The type of the 5th constructor parameter.</typeparam>
            <typeparam name="T6">The type of the 6th constructor parameter.</typeparam>
            <typeparam name="T7">The type of the 7th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``8">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <typeparam name="T5">The type of the 5th constructor parameter.</typeparam>
            <typeparam name="T6">The type of the 6th constructor parameter.</typeparam>
            <typeparam name="T7">The type of the 7th constructor parameter.</typeparam>
            <typeparam name="T8">The type of the 8th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``9">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <typeparam name="T5">The type of the 5th constructor parameter.</typeparam>
            <typeparam name="T6">The type of the 6th constructor parameter.</typeparam>
            <typeparam name="T7">The type of the 7th constructor parameter.</typeparam>
            <typeparam name="T8">The type of the 8th constructor parameter.</typeparam>
            <typeparam name="T9">The type of the 9th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.IConstructibleMaterializer`1.WithConstructor``10">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the 1st constructor parameter.</typeparam>
            <typeparam name="T2">The type of the 2nd constructor parameter.</typeparam>
            <typeparam name="T3">The type of the 3rd constructor parameter.</typeparam>
            <typeparam name="T4">The type of the 4th constructor parameter.</typeparam>
            <typeparam name="T5">The type of the 5th constructor parameter.</typeparam>
            <typeparam name="T6">The type of the 6th constructor parameter.</typeparam>
            <typeparam name="T7">The type of the 7th constructor parameter.</typeparam>
            <typeparam name="T8">The type of the 8th constructor parameter.</typeparam>
            <typeparam name="T9">The type of the 9th constructor parameter.</typeparam>
            <typeparam name="T10">The type of the 10th constructor parameter.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.ILink`1">
            <summary>
            This is implemented by materializers and appenders that return a value.
            </summary>
        </member>
        <member name="E:Tortuga.Chain.ILink`1.ExecutionTokenPrepared">
            <summary>
            Occurs when an execution token has been prepared.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="E:Tortuga.Chain.ILink`1.ExecutionTokenPreparing">
            <summary>
            Occurs when an execution token is about to be prepared.
            </summary>
            <remarks>This is mostly used by appenders to override SQL generation.</remarks>
        </member>
        <member name="P:Tortuga.Chain.ILink`1.DataSource">
            <summary>
            Gets the data source that is associated with this materializer or appender.
            </summary>
            <value>The data source.</value>
            <remarks>This is only used for cache operations</remarks>
        </member>
        <member name="M:Tortuga.Chain.ILink`1.CommandText">
            <summary>
            Returns command text (usually SQL) without executing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.ILink`1.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
        </member>
        <member name="M:Tortuga.Chain.ILink`1.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.ILink`1.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.InsertOptions">
            <summary>
            Controls what happens when performing a model-based insert
            </summary>
        </member>
        <member name="F:Tortuga.Chain.InsertOptions.None">
            <summary>
            Use the default behavior.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.InsertOptions.IdentityInsert">
            <summary>
            Override the identity/auto-number column.
            </summary>
            <remarks>This may require elevated privileges.</remarks>
        </member>
        <member name="T:Tortuga.Chain.JoinOptions">
            <summary>
            Enum JoinOptions
            </summary>
        </member>
        <member name="F:Tortuga.Chain.JoinOptions.None">
            <summary>
            The default behavior is to assign the child object to the first matching parent object. If there are no matches, an error is thrown.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.JoinOptions.MultipleParents">
            <summary>
            Continues searching when the first match is found, possibly assigning one the detail record to multiple parent records.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.JoinOptions.IgnoreUnmatchedChildren">
            <summary>
            If there are unmatchable child records, silently discard them instead of throwing an exception.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.JoinOptions.Parallel">
            <summary>
            Perform the join in parallel.
            </summary>
            <remarks>Lock overhead may make this slower than the normal mode. This relies on PLINQ, which may decide to not go parallel for small collections.</remarks>
        </member>
        <member name="T:Tortuga.Chain.LimitOptions">
            <summary>
            Types of limits that can be applied to a table, view, or table-value function query.
            </summary>
            <remarks>Databases are expected to provide their own enumeration that represents a subset of these options.</remarks>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.None">
            <summary>
            No limits were applied.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.Rows">
            <summary>
            Returns the indicated number of rows with optional offset
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.Percentage">
            <summary>
            Returns the indicated percentage of rows. May be applied to TableSample
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.WithTies">
            <summary>
            Adds WithTies behavior to Rows or Percentage
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.RowsWithTies">
            <summary>
            Returns the top N rows. When there is a tie for the Nth record, this will cause it to be returned.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.PercentageWithTies">
            <summary>
            Returns the top N percentage of rows. When there is a tie for the Nth record, this will cause it to be returned.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.RandomSample">
            <summary>
            Randomly select a set of rows. Combine this with Rows or Percentage and optionally a Table Sample algorithm.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.RandomSampleRows">
            <summary>
            Randomly sample the indicated number of rows
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.RandomSamplePercentage">
            <summary>
            Randomly sample the indicated percentage of rows
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.TableSampleSystem">
            <summary>
            Adds the Table Sample System algorithm to a random sample.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.TableSampleSystemRows">
            <summary>
            Randomly sample N rows using the Table Sample System algorithm.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.TableSampleSystemPercentage">
            <summary>
            Randomly sample N percentage of rows using the Table Sample System algorithm.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.TableSampleBernoulli">
            <summary>
            Adds the Table Sample Bernoulli algorithm behavior to a random sample.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.TableSampleBernoulliRows">
            <summary>
            Randomly sample N rows using the Table Sample Bernoulli algorithm.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.LimitOptions.TableSampleBernoulliPercentage">
            <summary>
            Randomly sample N percentage of rows using the Table Sample Bernoulli algorithm.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.ListOptions">
            <summary>
            Indicates how the list will be generated from a result set.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.ListOptions.None">
            <summary>
            An error will occur unless exactly one column is returned.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.ListOptions.DiscardNulls">
            <summary>
            Null values will be removed from the list.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.ListOptions.IgnoreExtraColumns">
            <summary>
            If extra columns are returned, all but the first will be ignored.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.ListOptions.FlattenExtraColumns">
            <summary>
            All columns will be incorporated into the result set. Values are read left to right, then top to bottom.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.MappingException">
            <summary>
            This exception occurs when there is a mismatch between the database schema and the object model.
            </summary>
            <seealso cref="T:System.Data.DataException" />
        </member>
        <member name="M:Tortuga.Chain.MappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MappingException"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.MappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MappingException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Tortuga.Chain.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MappingException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Tortuga.Chain.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MappingException"/> class.
            </summary>
            <param name="info">The data necessary to serialize or deserialize an object.</param>
            <param name="context">Description of the source and destination of the specified serialized stream.</param>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ConstructibleMaterializer`4">
            <summary>
            Class ConstructibleMaterializer.
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the result. This may be a collection of TObject.</typeparam>
            <typeparam name="TObject">The type of the object that will be returned.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3"/>
            <seealso cref="T:Tortuga.Chain.IConstructibleMaterializer`1"/>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.ConstructibleMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
        </member>
        <member name="P:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.ConstructorSignature">
            <summary>
            Gets or sets the constructor signature to use when materializing an object.
            </summary>
            <value>The constructor signature.</value>
        </member>
        <member name="P:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.ExcludedColumns">
            <summary>
            Columns to ignore when generating the list of desired columns.
            </summary>
            <value>The excluded columns.</value>
        </member>
        <member name="P:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.IncludedColumns">
            <summary>
            Only include the indicated columns when generating the list of desired columns.
            </summary>
            <value>The included columns.</value>
        </member>
        <member name="P:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.ObjectMetadata">
            <summary>
            Gets or sets the TObject metadata.
            </summary>
            <value>The object metadata.</value>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.DesiredColumns">
            <summary>
            Returns the list of columns the result materializer would like to have.
            </summary>
            <returns>IReadOnlyList&lt;System.String&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MappingException">
            Cannot find a constructor on {desiredType.Name} with the types [{types}]
            </exception>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which
            columns to return. If NoColumns is returned, the command builder should omit the
            SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.ExceptProperties(System.String[])">
            <summary>
            Excludes the properties from the list of what will be populated in the object.
            </summary>
            <param name="propertiesToOmit">The properties to omit.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor(System.Type[])">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <param name="constructorSignature">The constructor signature.</param>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``1">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``2">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``3">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``4">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``5">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``6">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``7">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``8">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``9">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithConstructor``10">
            <summary>
            Appends the indicated constructor onto the materializer.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ConstructibleMaterializer`4.WithProperties(System.String[])">
            <summary>
            Limits the list of properties to populate to just the indicated list.
            </summary>
            <param name="propertiesToPopulate">The properties of the object to populate.</param>
            <returns>ILink&lt;TResult&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.MappedProperty`2">
            <summary>
            The purpose of this class
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Materializer">
            <summary>
            This is the root base class for materializers. It is used when we need to strip away the generic type arguments.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Materializers.Materializer.AllColumns">
            <summary>
            Return all columns.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Materializers.Materializer.AutoSelectDesiredColumns">
            <summary>
            The automatically select desired columns. If there are primary key column(s), return them. Otherwise look for an identity column. If that is missing too, raise an exception.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Materializers.Materializer.NoColumns">
            <summary>
            Return no columns. Used when the result of the operation is not desired (e.g. insert/update).
            </summary>
        </member>
        <member name="E:Tortuga.Chain.Materializers.Materializer.ExecutionTokenPrepared">
            <summary>
            Occurs when an execution token has been prepared.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="E:Tortuga.Chain.Materializers.Materializer.ExecutionTokenPreparing">
            <summary>
            Occurs when execution token is about to be been prepared.
            </summary>
            <remarks>This is mostly used by appenders to override SQL generation.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>IReadOnlyList&lt;System.String&gt;.</returns>
            <remarks>If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer.OnExecutionTokenPrepared(Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:Tortuga.Chain.Materializers.Materializer.ExecutionTokenPrepared" /> event.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer.OnExecutionTokenPreparing(Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs)">
            <summary>
            Raises the <see cref="E:Tortuga.Chain.Materializers.Materializer.ExecutionTokenPreparing" /> event.
            </summary>
            <param name="e">The <see cref="T:Tortuga.Chain.Core.ExecutionTokenPreparingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Tortuga.Chain.Materializers.MaterializerUtilities">
            <summary>
            Materializer utilities are used for constructing materializers.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.MaterializerUtilities.CheckUpdateRowCount``1(``0,Tortuga.Chain.UpdateOptions,System.Nullable{System.Int32})">
            <summary>
            Checks the update row count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="executionToken">The execution token.</param>
            <param name="updateOptions">The update options.</param>
            <param name="expectedRowCount">The expected row count.</param>
            <returns>The execution token with an attached event handler.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.MaterializerUtilities.CheckUpdateRowCount``1(``0,Tortuga.Chain.UpdateOptions)">
            <summary>
            Checks the update row count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="executionToken">The execution token.</param>
            <param name="updateOptions">The update options.</param>
            <returns>The execution token with an attached event handler.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.MaterializerUtilities.PopulateComplexObject``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},``0,System.String)">
            <summary>
            Populates the complex object.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The object being populated.</param>
            <param name="decompositionPrefix">The decomposition prefix.</param>
            <remarks>This honors the Column and Decompose attributes.</remarks>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Materializer`2">
            <summary>
            This is the base class for materializers that don't return a value. Most operation are not executed without first attaching a materializer subclass.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.Materializer`2"/> class.
            </summary>
            <param name="commandBuilder">The associated command builder.</param>
            <exception cref="T:System.ArgumentNullException">operation;operation is null.</exception>
        </member>
        <member name="P:Tortuga.Chain.Materializers.Materializer`2.CommandBuilder">
            <summary>
            Gets the associated operation.
            </summary>
            <value>The command builder.</value>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`2.CommandText">
            <summary>
            Returns the command text (usually SQL) without executing it.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`2.Prepare">
            <summary>
            Prepares this operation for execution.
            </summary>
            <returns>ExecutionToken&lt;TCommand, TParameter&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Materializer`3">
            <summary>
            This is the base class for materializers that return a value. Most operation are not executed without first attaching a materializer subclass.
            Implements the <see cref="T:Tortuga.Chain.Materializers.Materializer`2"/>
            Implements the <see cref="T:Tortuga.Chain.ILink`1"/>
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`2" />
            <seealso cref="T:Tortuga.Chain.ILink`1" />
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`2" />
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`3.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.Materializer`3"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
        </member>
        <member name="P:Tortuga.Chain.Materializers.Materializer`3.DataSource">
            <summary>
            Gets the data source that is associated with this materializer or appender.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`3.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`3.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Materializer`3.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.CollectionMaterializer`4">
            <summary>
            Materializes the result set as a collection of the indicated type.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="TObject">The type of the object returned.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3"/>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionMaterializer`4.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.CollectionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
            <param name="collectionOptions">The collection options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionMaterializer`4.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionMaterializer`4.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DataTableMaterializer`2">
            <summary>
            Materializes the result set as a DataTable.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataTableMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DataTableMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataTableMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataTableMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataTableMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DictionaryMaterializer`5">
            <summary>
            Materializes the result set as a dictionary of the indicated type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TDictionary">The type of the dictionary.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3"/>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DynamicCollectionMaterializer`2">
            <summary>
            Materializes the result set as a List of dynamic objects.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicCollectionMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DynamicCollectionMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicCollectionMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicCollectionMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicCollectionMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ImmutableArrayMaterializer`3">
            <summary>
            Materializes the result set as an immutable array of the indicated type.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="TObject">The type of the object returned.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3"/>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableArrayMaterializer`3.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.CollectionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
            <param name="collectionOptions">The collection options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableArrayMaterializer`3.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableArrayMaterializer`3.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ImmutableDictionaryMaterializer`4">
            <summary>
            Materializes the result set as a dictionary of the indicated type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3" />
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableDictionaryMaterializer`4.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ImmutableListMaterializer`3">
            <summary>
            Materializes the result set as an immutable list of the indicated type.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="TObject">The type of the object returned.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3"/>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableListMaterializer`3.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.CollectionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
            <param name="collectionOptions">The collection options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableListMaterializer`3.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">The state.</param>
            <returns>ImmutableList&lt;TObject&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ImmutableListMaterializer`3.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.TableMaterializer`2">
            <summary>
            Materializes the result set as a Table.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.TableMaterializer`2" /> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`4">
            <summary>
            Materializes the result set as a TableSet.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`4.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`4.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`4.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`4.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`5">
            <summary>
            Materializes the result set as a TableSet.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`5.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`5.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`5.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`5.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`6">
            <summary>
            Materializes the result set as a TableSet.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`6.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`6.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`6.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`6.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`7">
            <summary>
            Materializes the result set as a TableSet.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`7.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.CollectionSetMaterializer`4"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`7.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`7.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.CollectionSetMaterializer`7.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DataSetMaterializer`2">
            <summary>
            Materializes the result set as a DataSet.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DataSetMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="tableNames">The table names.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataSetMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.TableSetMaterializer`2">
            <summary>
            Materializes the result set as a TableSet.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.TableSetMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="tableNames">The table names.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableSetMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TableSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.NonQueryMaterializer`2">
            <summary>
            This class indicates the associated operation should be executed without returning a result set.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Materializers.NonQueryMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.NonQueryMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The associated command builder.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.NonQueryMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.NonQueryMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Number of rows affected, if available from the database.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.NonQueryMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Number of rows affected, if available from the database.</returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Operation`2">
            <summary>
            This is the operation equivalent to the NonQueryMaterializer.
            </summary>
            <typeparam name="TConnection">The type of the t connection.</typeparam>
            <typeparam name="TTransaction">The type of the t transaction.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Operation`2.#ctor(Tortuga.Chain.CommandBuilders.DbOperationBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.Operation`2"/> class.
            </summary>
            <param name="operationBuilder">The operation builder.</param>
        </member>
        <member name="E:Tortuga.Chain.Materializers.Operation`2.ExecutionTokenPrepared">
            <summary>
            Occurs when an execution token has been prepared.
            </summary>
            <remarks>This is mostly used by appenders to override command behavior.</remarks>
        </member>
        <member name="E:Tortuga.Chain.Materializers.Operation`2.ExecutionTokenPreparing">
            <summary>
            Occurs when an execution token is about to be prepared.
            </summary>
            <remarks>This is mostly used by appenders to override SQL generation.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Materializers.Operation`2.DataSource">
            <summary>
            Gets the data source that is associated with this materializer or appender.
            </summary>
            <value>The data source.</value>
            <remarks>This is only used for</remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Operation`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Operation`2.ExecuteAsync(System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Operation`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task&lt;System.Nullable&lt;System.Int32&gt;&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Operation`2.Prepare">
            <summary>
            Prepares this operation for execution.
            </summary>
            <returns>ExecutionToken&lt;TCommand, TParameter&gt;.</returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.BooleanMaterializer`2">
            <summary>
            Materializes the result set as a boolean.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="T:Tortuga.Chain.Materializers.BooleanOrNullMaterializer`2">
            <summary>
            Materializes the result set as a boolean.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanOrNullMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ByteArrayMaterializer`2">
            <summary>
            Materializes the result set as a byte array.
            </summary>
            <typeparam name="TCommand">The type of the tt command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.ByteArrayMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ByteArrayOrNullMaterializer`2">
            <summary>
            Materializes the result set as a byte array.
            </summary>
            <typeparam name="TCommand">The type of the tt command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.ByteArrayMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ByteMaterializer`2">
            <summary>
            Materializes the result set as a byte.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ByteOrNullMaterializer`2">
            <summary>
            Materializes the result set as a byte.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanOrNullMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeMaterializer`2">
            <summary>
            Materializes the result set as a DateTime.
            </summary>
            <typeparam name="TCommand">The type of the tt command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeOffsetMaterializer`2">
            <summary>
            Materializes the result set as a DateTimeOffset.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeOffsetMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeOffsetOrNullMaterializer`2">
            <summary>
            Materializes the result set as a DateTimeOffset.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeOffsetOrNullMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeOrNullMaterializer`2">
            <summary>
            Materializes the result set as a DateTime.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeOrNullMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DecimalMaterializer`2">
            <summary>
            Materializes the result set as a decimal.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DecimalMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DecimalOrNullMaterializer`2">
            <summary>
            Materializes the result set as a decimal.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DecimalOrNullMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DoubleMaterializer`2">
            <summary>
            Materializes the result set as a floating point number.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DoubleOrNullMaterializer`2">
            <summary>
            Materializes the result set as a floating point number.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DoubleOrNullMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.GuidMaterializer`2">
            <summary>
            Materializes the result set as a Guid.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.GuidMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.GuidOrNullMaterializer`2">
            <summary>
            Materializes the result set as a Guid.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int16Materializer`2">
            <summary>
            Materializes the result set as an integer.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16Materializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16Materializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16Materializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int16OrNullMaterializer`2">
            <summary>
            Materializes the result set as an integer.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16OrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16OrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16OrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int32Materializer`2">
            <summary>
            Materializes the result set as an integer.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32Materializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32Materializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32Materializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int32OrNullMaterializer`2">
            <summary>
            Materializes the result set as an integer.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32OrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32OrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32OrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int64Materializer`2">
            <summary>
            Materializes the result set as an integer.
            </summary>
            <typeparam name="TCommand">The type of the tt command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64Materializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.Int64Materializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64Materializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64Materializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int64OrNullMaterializer`2">
            <summary>
            Materializes the result set as an integer.
            </summary>
            <typeparam name="TCommand">The type of the tt command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64OrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.Int64OrNullMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64OrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64OrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ScalarMaterializer`3">
            <summary>
            This class represents result materializers that read a Scalar value.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ScalarMaterializer`3.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.SingleColumnMaterializer`3" /> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ScalarMaterializer`3.DesiredColumns">
            <summary>
            Returns the list of columns the result materializer would like to have.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ScalarMaterializer`3.ExecuteCore(Tortuga.Chain.Core.CommandImplementation{`0},System.Object)">
            <summary>
            Helper method for executing the operation.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ScalarMaterializer`3.ExecuteCore(System.Action{`0},System.Object)">
            <summary>
            Helper method for executing the operation.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ScalarMaterializer`3.ExecuteCoreAsync(Tortuga.Chain.Core.CommandImplementationAsync{`0},System.Threading.CancellationToken,System.Object)">
            <summary>
            Helper method for executing the operation.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ScalarMaterializer`3.ExecuteCoreAsync(System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Object)">
            <summary>
            Helper method for executing the operation.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">The state.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.SingleMaterializer`2">
            <summary>
            Materializes the result set as a floating point number.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.SingleMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.SingleOrNullMaterializer`2">
            <summary>
            Materializes the result set as a floating point number.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.StringMaterializer`2">
            <summary>
            Materializes the result set as a string.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.StringMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.StringMaterializerOrNull`2">
            <summary>
            Materializes the result set as a string.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringMaterializerOrNull`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.StringMaterializerOrNull`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringMaterializerOrNull`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringMaterializerOrNull`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.TimeSpanMaterializer`2">
            <summary>
            Materializes the result set as a TimeSpan.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.TimeSpanMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">The state.</param>
            <returns>TimeSpan.</returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task&lt;TimeSpan&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">Unexpected null result</exception>
        </member>
        <member name="T:Tortuga.Chain.Materializers.TimeSpanOrNullMaterializer`2">
            <summary>
            Materializes the result set as a TimeSpan.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.XElementMaterializer`2">
            <summary>
            Materializes the result set as a string.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.XElementMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.XElementOrNullMaterializer`2">
            <summary>
            Materializes the result set as an XElement.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementOrNullMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.XElementOrNullMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementOrNullMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementOrNullMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.BooleanListMaterializer`2">
            <summary>
            Materializes the result set as a list of booleans.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.BooleanListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ByteArrayListMaterializer`2">
            <summary>
            Materializes the result set as a list of byte arrays.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteArrayListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ByteListMaterializer`2">
            <summary>
            Materializes the result set as a list of byte.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.BooleanListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ByteListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeListMaterializer`2">
            <summary>
            Materializes the result set as a list of DateTime.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeOffsetListMaterializer`2">
            <summary>
            Materializes the result set as a list of DateTimeOffset.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeOffsetListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeOffsetSetMaterializer`2">
            <summary>
            Materializes the result set as a list of DateTimeOffset.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeOffsetListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeOffsetSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DateTimeSetMaterializer`2">
            <summary>
            Materializes the result set as a set of DateTime.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DateTimeListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DateTimeSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DecimalListMaterializer`2">
            <summary>
            Materializes the result set as a list of numbers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DecimalListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DecimalSetMaterializer`2">
            <summary>
            Materializes the result set as a list of numbers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DecimalListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DecimalSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DoubleListMaterializer`2">
            <summary>
            Materializes the result set as a list of numbers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DoubleListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DoubleSetMaterializer`2">
            <summary>
            Materializes the result set as a list of numbers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DoubleSetMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DoubleSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.GuidListMaterializer`2">
            <summary>
            Materializes the result set as a list of Guids.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.GuidSetMaterializer`2">
            <summary>
            Materializes the result set as a list of Guids.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.GuidSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int16ListMaterializer`2">
            <summary>
            Materializes the result set as a list of integers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16ListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16ListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16ListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int16SetMaterializer`2">
            <summary>
            Materializes the result set as a list of integers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16SetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16SetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int16SetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int32ListMaterializer`2">
            <summary>
            Materializes the result set as a list of integers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32ListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32ListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32ListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int32SetMaterializer`2">
            <summary>
            Materializes the result set as a list of integers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32SetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32SetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int32SetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int64ListMaterializer`2">
            <summary>
            Materializes the result set as a list of integers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64ListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64ListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64ListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.Int64SetMaterializer`2">
            <summary>
            Materializes the result set as a list of integers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64SetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64SetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.Int64SetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.SingleColumnMaterializer`3">
            <summary>
            This class represents result materializers that read from a single column.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleColumnMaterializer`3.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.SingleColumnMaterializer`3" /> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleColumnMaterializer`3.DesiredColumns">
            <summary>
            Returns the list of columns the result materializer would like to have.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Materializers.SingleListMaterializer`2">
            <summary>
            Materializes the result set as a list of numbers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.SingleSetMaterializer`2">
            <summary>
            Materializes the result set as a list of numbers.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.SingleSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.StringListMaterializer`2">
            <summary>
            Materializes the result set as a list of strings.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.StringListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.StringSetMaterializer`2">
            <summary>
            Materializes the result set as a list of strings.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.StringSetMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.StringSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.TimeSpanListMaterializer`2">
            <summary>
            Materializes the result set as a list of TimeSpan.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.TimeSpanSetMaterializer`2">
            <summary>
            Materializes the result set as a list of TimeSpan.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanSetMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="listOptions">The list options.</param>
            <param name="columnName">Name of the desired column.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanSetMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.TimeSpanSetMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.XElementListMaterializer`2">
            <summary>
            Materializes the result set as a list of strings.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementListMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},System.String,Tortuga.Chain.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.XElementListMaterializer`2"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="columnName">Name of the desired column.</param>
            <param name="listOptions">The list options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementListMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.XElementListMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DataRowMaterializer`2">
            <summary>
            Materializes the result set as a single row.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataRowMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.RowOptions)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DataRowMaterializer`2"/> class.</summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="rowOptions">The row options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataRowMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DataRowMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.DynamicObjectMaterializer`2">
            <summary>
            Materializes the result set as a dynamic object.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicObjectMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.RowOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.DynamicObjectMaterializer`2" /> class.
            </summary>
            <param name="commandBuilder">The associated operation.</param>
            <param name="rowOptions">The row options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicObjectMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicObjectMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">The state.</param>
            <returns>System.Nullable&lt;dynamic&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">No rows were returned</exception>
            <exception cref="T:Tortuga.Chain.UnexpectedDataException">Expected 1 row but received " + rowCount + " rows</exception>
        </member>
        <member name="M:Tortuga.Chain.Materializers.DynamicObjectMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>Task&lt;System.Nullable&lt;dynamic&gt;&gt;.</returns>
            <exception cref="T:Tortuga.Chain.MissingDataException">No rows were returned</exception>
            <exception cref="T:Tortuga.Chain.UnexpectedDataException">Expected 1 row but received " + rowCount + " rows</exception>
        </member>
        <member name="T:Tortuga.Chain.Materializers.ObjectMaterializer`3">
            <summary>
            Materializes the result set as an instance of the indicated type.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
            <typeparam name="TObject">The type of the object returned.</typeparam>
            <seealso cref="T:Tortuga.Chain.Materializers.Materializer`3"/>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ObjectMaterializer`3.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.RowOptions)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Tortuga.Chain.Materializers.ObjectMaterializer`3"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="rowOptions">The row options.</param>
            <exception cref="T:Tortuga.Chain.MappingException">
            Type {typeof(TObject).Name} has does not have any non-default constructors. or Type
            {typeof(TObject).Name} has more than one non-default constructor. Please use the
            WithConstructor method to specify which one to use.
            </exception>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ObjectMaterializer`3.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <param name="state">User defined state, usually used for logging.</param>
            <returns>System.Nullable&lt;TObject&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.ObjectMaterializer`3.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RefreshMaterializer`3.#ctor(Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Materializers.RefreshMaterializer`3"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RefreshMaterializer`3.DesiredColumns">
            <summary>
            Returns the list of columns the result materializer would like to have.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RefreshMaterializer`3.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RefreshMaterializer`3.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Materializers.RowMaterializer`2">
            <summary>
            Materializes the result set as a single row.
            </summary>
            <typeparam name="TCommand">The type of the t command type.</typeparam>
            <typeparam name="TParameter">The type of the t parameter type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RowMaterializer`2.#ctor(Tortuga.Chain.CommandBuilders.DbCommandBuilder{`0,`1},Tortuga.Chain.RowOptions)">
            <summary>
            </summary>
            <param name="commandBuilder">The command builder.</param>
            <param name="rowOptions">The row options.</param>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RowMaterializer`2.DesiredColumns">
            <summary>
            Returns the list of columns the materializer would like to have.
            </summary>
            <returns>
            IReadOnlyList&lt;System.String&gt;.
            </returns>
            <remarks>
            If AutoSelectDesiredColumns is returned, the command builder is allowed to choose which columns to return. If NoColumns is returned, the command builder should omit the SELECT/OUTPUT clause.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RowMaterializer`2.Execute(System.Object)">
            <summary>
            Execute the operation synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Materializers.RowMaterializer`2.ExecuteAsync(System.Threading.CancellationToken,System.Object)">
            <summary>
            Execute the operation asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="state">User defined state, usually used for logging.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.SqlServer.MetadataException">
            <summary>
            Error loading the schema metadata from the database.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Tortuga.Chain.SqlServer.MetadataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.MetadataException"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.MetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.MetadataException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.MetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.MetadataException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Tortuga.Chain.SqlServer.MetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SqlServer.MetadataException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ColumnMetadata">
            <summary>
            Abstract version of ColumnMetadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadata.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata`1" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isComputed">if set to <c>true</c> is a computed column.</param>
            <param name="isPrimaryKey">if set to <c>true</c> is a primary key.</param>
            <param name="isIdentity">if set to <c>true</c> [is identity].</param>
            <param name="typeName">Name of the type.</param>
            <param name="dbType">Type used by the database.</param>
            <param name="quotedSqlName">Name of the quoted SQL.</param>
            <param name="isNullable">Indicates if the column is nullable.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <param name="clrType">The CLR type that matches this column's database type.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.ClrName">
            <summary>
            Gets the name used by CLR objects.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.ClrType">
            <summary>
            The CLR type of the column or NULL if the type is unknown.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.DbType">
            <summary>
            Gets the type used by the database.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.FullTypeName">
            <summary>
            Gets or sets the full name of the type including max length, precision, and/or scale.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.IsComputed">
            <summary>
            Gets a value indicating whether this <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata`1"/> is computed.
            </summary>
            <value>
            <c>true</c> if computed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.IsIdentity">
            <summary>
            Gets a value indicating whether this column is an identity column.
            </summary>
            <value><c>true</c> if this instance is identity; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.IsNullable">
            <summary>
            Gets or sets a value indicating whether this column is nullable.
            </summary>
            <value>
            <c>true</c> if this column is nullable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.IsPrimaryKey">
            <summary>
            Gets a value indicating whether this column is a primary key.
            </summary>
            <value><c>true</c> if this instance is primary key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>
            The precision.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.QuotedSqlName">
            <summary>
            Gets the name used by SQL Server, quoted.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.SqlName">
            <summary>
            Gets the name used by the database.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.SqlVariableName">
            <summary>
            Gets the column, formatted as a SQL variable.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata.TypeName">
            <summary>
            Gets the name of the type as known to the database.
            </summary>
            <value>The name of the type as known to the database.</value>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadata.ClrTypeName(Tortuga.Chain.Metadata.NameGenerationOptions)">
            <summary>
            Returns the CLR Type name suitable for code generation scenarios.
            </summary>
            <param name="options">Code generation options.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ColumnMetadataCollection">
            <summary>
            Class ColumnMetadataCollection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadataCollection.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Tortuga.Chain.Metadata.ColumnMetadata})">
            <summary>
            Initializes a new instance of the IndexColumnMetadataCollection class that is a read-only wrapper around the specified list.
            </summary>
            <param name="name">The name of the parent object.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadataCollection.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <returns>The number of elements in the collection. </returns>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadataCollection.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list.</summary>
            <param name="index">The zero-based index of the element to get. </param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadataCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadataCollection.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>If the column name was not found, this will return null</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadataCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata"/> with the specified column name.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata"/>.
            </value>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ColumnMetadataCollection`1">
            <summary>
            Collection of Column Metadata
            </summary>
            <typeparam name="TDbType">The type of the database type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadataCollection`1.#ctor(System.String,System.Collections.Generic.IList{Tortuga.Chain.Metadata.ColumnMetadata{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ColumnMetadataCollection`1" /> class.
            </summary>
            <param name="name">The name of the parent object.</param>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadataCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata`1"/> with the specified column name.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata`1"/>.
            </value>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadataCollection`1.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>If the column name was not found, this will return null</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadataCollection`1.GenericCollection">
            <summary>
            Gets the generic version of this collection.
            </summary>
            <remarks>We can't make this implement IReadOnlyList because it breaks LINQ.</remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ColumnMetadata`1">
            <summary>
            Metadata for a table or view column
            </summary>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadata`1.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Nullable{`0},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ColumnMetadata`1" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isComputed">if set to <c>true</c> is a computed column.</param>
            <param name="isPrimaryKey">if set to <c>true</c> is a primary key.</param>
            <param name="isIdentity">if set to <c>true</c> [is identity].</param>
            <param name="typeName">Name of the type.</param>
            <param name="dbType">Type used by the database.</param>
            <param name="quotedSqlName">Name of the quoted SQL.</param>
            <param name="isNullable">Indicates if the column is nullable.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <param name="clrType">The CLR type that matches this column's database type.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnMetadata`1.DbType">
            <summary>
            Gets the type used by the database.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnMetadata`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ColumnNamePair">
            <summary>
            This is used to read out column names during SQL generation.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnNamePair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ColumnNamePair"/> struct.
            </summary>
            <param name="quotedSqlName">Name of the quoted SQL.</param>
            <param name="sqlVariableName">Name of the SQL variable.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnNamePair.QuotedSqlName">
            <summary>
            Gets or sets column name as quoted SQL.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnNamePair.SqlVariableName">
            <summary>
            Gets or sets column name as a SQL variable.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnNamePair.op_Inequality(Tortuga.Chain.Metadata.ColumnNamePair,Tortuga.Chain.Metadata.ColumnNamePair)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnNamePair.op_Equality(Tortuga.Chain.Metadata.ColumnNamePair,Tortuga.Chain.Metadata.ColumnNamePair)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnNamePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnNamePair.Equals(Tortuga.Chain.Metadata.ColumnNamePair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnNamePair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ColumnPropertyMap`1">
            <summary>
            This maps database columns (tables and views) to class properties.
            </summary>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ColumnPropertyMap`1.#ctor(Tortuga.Chain.Metadata.ColumnMetadata{`0},Tortuga.Anchor.Metadata.PropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ColumnPropertyMap`1"/> class.
            </summary>
            <param name="column">The column.</param>
            <param name="property">The property.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnPropertyMap`1.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ColumnPropertyMap`1.Property">
            <summary>
            Gets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.DatabaseMetadataCache`2">
            <summary>
            An abstract database metadata cache
            </summary>
            <typeparam name="TName">The type used to represent database object names.</typeparam>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="F:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.m_RegisteredTypes">
            <summary>
            This dictionary is used to register customer database types. It is used by the ToClrType method and possibly parameter generation.
            </summary>
            <remarks>This is populated by the RegisterType method.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.MaxParameters">
            <summary>
            Gets the maximum number of parameters in a single SQL batch.
            </summary>
            <value>The maximum number of parameters.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.ServerVersion">
            <summary>
            Gets the server version number.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.ServerVersionName">
            <summary>
            Gets the server version name.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.UnsupportedSqlTypeNames">
            <summary>
            Gets a list of known, unsupported SQL type names.
            </summary>
            <value>Case-insensitive list of database-specific type names</value>
            <remarks>This list is based on driver limitations.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetForeignKeysForTable(`0)">
            <summary>
            Gets the foreign keys for a table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Foreign keys are not supported by this data source</exception>
            <remarks>
            This should be cached on a TableOrViewMetadata object.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetIndexesForTable(`0)">
            <summary>
            Gets the indexes for a table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Indexes are not supported by this data source</exception>
            <remarks>
            This should be cached on a TableOrViewMetadata object.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetScalarFunction(`0)">
            <summary>
            Gets the metadata for a scalar function.
            </summary>
            <param name="scalarFunctionName">Name of the scalar function.</param>
            <returns>Null if the object could not be found.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetScalarFunctions">
            <summary>
            Gets the scalar functions that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>
            Call Preload before invoking this method to ensure that all scalar functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetStoredProcedure(`0)">
            <summary>
            Gets the stored procedure's metadata.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetStoredProcedures">
            <summary>
            Gets the stored procedures that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all stored procedures were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetTableFunction(`0)">
            <summary>
            Gets the metadata for a table function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetTableFunctions">
            <summary>
            Gets the table-valued functions that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all table-valued functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetTableOrView(`0)">
            <summary>
            Gets the metadata for a table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetTableOrViewFromClass``1">
            <summary>
            Returns the table or view derived from the class's name and/or Table attribute.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.Tortuga#Chain#Metadata#IDatabaseMetadataCache#GetTableOrViewFromClass``1">
            <summary>
            Returns the table or view derived from the class's name and/or Table attribute.
            </summary>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetTablesAndViews">
            <summary>
            Gets the tables and views that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all tables and views were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetUserDefinedTableType(`0)">
            <summary>
            Gets the metadata for a user defined type.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.GetUserDefinedTableTypes">
            <summary>
            Gets the table-valued functions that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all table-valued functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.Preload">
            <summary>
            Preloads all of the metadata for this data source.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.RegisterType(System.String,`1,System.Type)">
            <summary>
            Registers a database type and its CLR equivalent.
            </summary>
            <param name="databaseTypeName">Name of the database type.</param>
            <param name="databaseType">Type of the database.</param>
            <param name="clrType">Type of the color.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.Reset">
            <summary>
            Resets the metadata cache, clearing out all cached metadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.ToClrType(System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Returns the CLR type that matches the indicated database column type.
            </summary>
            <param name="typeName">Name of the database column type.</param>
            <param name="isNullable">If nullable, Nullable versions of primitive types are returned.</param>
            <param name="maxLength">Optional length. Used to distinguish between a char and string.</param>
            <param name="isUnsigned">Indicates whether or not the column is unsigned. Only applicable to some databases.</param>
            <returns>
            A CLR type or NULL if the type is unknown.
            </returns>
            <remarks>Use RegisterType to add a missing mapping or override an existing one.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetStoredProcedure(System.String,Tortuga.Chain.Metadata.StoredProcedureMetadata@)">
            <summary>
            Tries to get the stored procedure's metadata.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="storedProcedure">The stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetStoredProcedure(`0,Tortuga.Chain.Metadata.StoredProcedureMetadata@)">
            <summary>
            Tries to get the stored procedure's metadata.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="storedProcedure">The stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetTableFunction(System.String,Tortuga.Chain.Metadata.TableFunctionMetadata@)">
            <summary>
            Tries to get the metadata for a table function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <param name="tableFunction">The table function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetTableFunction(`0,Tortuga.Chain.Metadata.TableFunctionMetadata@)">
            <summary>
            Tries to get the metadata for a table function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <param name="tableFunction">The table function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetTableOrView(System.String,Tortuga.Chain.Metadata.TableOrViewMetadata@)">
            <summary>
            Tries to get the metadata for a table or view.
            </summary>
            <param name="tableName">Name of the table or view.</param>
            <param name="tableOrView">The table or view.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetTableOrView(`0,Tortuga.Chain.Metadata.TableOrViewMetadata@)">
            <summary>
            Tries to get the metadata for a table or view.
            </summary>
            <param name="tableName">Name of the table or view.</param>
            <param name="tableOrView">The table or view.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetUserDefinedTableType(System.String,Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata@)">
            <summary>
            Try to get the metadata for a user defined type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="userDefinedTableType">Type of the user defined table type.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetUserDefinedTableType(`0,Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata@)">
            <summary>
            Try to get the metadata for a user defined type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="userDefinedTableType">Type of the user defined.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.UnregisterType(System.String)">
            <summary>
            Removes a database type registration and its CLR equivalent. If a builtin type, this restores it to its default behavior.
            </summary>
            <param name="databaseTypeName">Name of the database type.</param>
            <remarks>True if the type was successfully unregistered. False if the type was not found.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.ValueToSqlValue(System.Object,System.Nullable{`1})">
            <summary>
            Converts a value to a string suitable for use in a SQL statement.
            </summary>
            <param name="value">The value.</param>
            <param name="dbType">Optional database column type.</param>
            <returns></returns>
            <remarks>Override this to support custom escaping logic.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.ParseObjectName(System.String)">
            <summary>
            Parse a string and return the database specific representation of the object name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.SqlTypeNameToDbType(System.String,System.Nullable{System.Boolean})">
            <summary>
            Determines the database column type from the column type name.
            </summary>
            <param name="typeName">Name of the database column type.</param>
            <param name="isUnsigned">Indicates whether or not the column is unsigned. Only applicable to some databases.</param>
            <returns></returns>
            <remarks>This does not honor registered types. This is only used for the database's hard-coded list of native types.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.ToClrType(`1,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Returns the CLR type that matches the indicated database column type.
            </summary>
            <param name="dbType">Type of the database column.</param>
            <param name="isNullable">If nullable, Nullable versions of primitive types are returned.</param>
            <param name="maxLength">Optional length. Used to distinguish between a char and string. Defaults to string.</param>
            <returns>
            A CLR type or NULL if the type is unknown.
            </returns>
            <remarks>This does not take into consideration registered types.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DatabaseMetadataCache`2.TryGetRegisteredType(System.String,Tortuga.Chain.Metadata.TypeRegistration{`1}@)">
            <summary>
            Tries the registered column type from a database column type name.
            </summary>
            <param name="databaseTypeName">Name of the database type.</param>
            <param name="registeredType">Type of the registered.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.DbDatabaseMetadataCache`1">
            <summary>
            Meatadata cache base class for DbType databases
            </summary>
            <typeparam name="TName">The type used to represent database object names.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.DbDatabaseMetadataCache`1.ToClrType(System.Data.DbType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Returns the CLR type that matches the indicated database column type.
            </summary>
            <param name="dbType">Type of the database column.</param>
            <param name="isNullable">If nullable, Nullable versions of primitive types are returned.</param>
            <param name="maxLength">Optional length. Used to distinguish between a char and string. Defaults to string.</param>
            <returns>
            A CLR type or NULL if the type is unknown.
            </returns>
            <remarks>
            This does not take into consideration registered types.
            </remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ForeignKeyConstraint">
            <summary>
            This represents a foreign key relationship between two tables.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ForeignKeyConstraint.#ctor(System.String,Tortuga.Chain.Metadata.ColumnMetadataCollection,System.String,Tortuga.Chain.Metadata.ColumnMetadataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ForeignKeyConstraint" /> class.
            </summary>
            <param name="parentTableName">Name of the parent table.</param>
            <param name="parentColumns">The parent columns.</param>
            <param name="childTableName">Name of the child table.</param>
            <param name="childColumns">The child columns.</param>
            <exception cref="T:System.ArgumentException">
            parentColumns
            or
            childColumns
            </exception>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint.ChildColumns">
            <summary>
            Gets the columns in the child table.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint.ChildTableName">
            <summary>
            Gets the name of the child table.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint.ParentColumns">
            <summary>
            Gets the columns in the parent table. This will usually be the primary key(s).
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint.ParentTableName">
            <summary>
            Gets the name of the parent table.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection">
            <summary>Class ForeignKeyConstraintCollection.
            Implements the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/></summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1" />
        </member>
        <member name="M:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection.#ctor(System.Collections.Generic.IReadOnlyList{Tortuga.Chain.Metadata.ForeignKeyConstraint})">
            <summary>
            Initializes a new instance of the IndexColumnMetadataCollection class that is a read-only wrapper around the specified list.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <returns>The number of elements in the collection. </returns>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list.</summary>
            <param name="index">The zero-based index of the element to get. </param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection`2">
            <summary>
            Class ForeignKeyConstraintCollection.
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <typeparam name="TDbType">The type of the database type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection`2.#ctor(System.Collections.Generic.IList{Tortuga.Chain.Metadata.ForeignKeyConstraint{`0,`1}})">
            <summary>Initializes a new instance of the class that is a read-only wrapper around the specified list.</summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraintCollection`2.GenericCollection">
            <summary>
            Gets the generic version of this collection.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ForeignKeyConstraint`2">
            <summary>
            This represents a foreign key relationship between two tables.
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <typeparam name="TDbType">The database column type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ForeignKeyConstraint`2.#ctor(`0,Tortuga.Chain.Metadata.ColumnMetadataCollection{`1},`0,Tortuga.Chain.Metadata.ColumnMetadataCollection{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ForeignKeyConstraint`2" /> class.
            </summary>
            <param name="parentTableName">Name of the parent table.</param>
            <param name="parentColumns">The parent columns.</param>
            <param name="childTableName">Name of the child table.</param>
            <param name="childColumns">The child columns.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint`2.ChildColumns">
            <summary>
            Gets the columns in the child table.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint`2.ChildTableName">
            <summary>
            Gets the name of the child table.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint`2.ParentColumns">
            <summary>
            Gets the columns in the parent table. This will usually be the primary key(s).
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ForeignKeyConstraint`2.ParentTableName">
            <summary>
            Gets the name of the parent table.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IDatabaseMetadataCache">
            <summary>
            Abstract version of the database metadata cache.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetStoredProcedure(System.String)">
            <summary>
            Gets the stored procedure's metadata.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetStoredProcedures">
            <summary>
            Gets the stored procedures that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all stored procedures were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetTableFunction(System.String)">
            <summary>
            Gets the metadata for a table function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetTableFunctions">
            <summary>
            Gets the table-valued functions that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all table-valued functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetTableOrView(System.String)">
            <summary>
            Gets the metadata for a table or view.
            </summary>
            <param name="tableName">Name of the table or view.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetTableOrViewFromClass``1">
            <summary>
            Returns the table or view derived from the class's name and/or Table attribute.
            </summary>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetTablesAndViews">
            <summary>
            Gets the tables and views that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all tables and views were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetUserDefinedTableType(System.String)">
            <summary>
            Gets the metadata for a user defined type.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.GetUserDefinedTableTypes">
            <summary>
            Gets the user defined table types that were loaded by this cache.
            </summary>
            <returns></returns>
            <remarks>Call Preload before invoking this method to ensure that all table-valued functions were loaded from the database's schema. Otherwise only the objects that were actually used thus far will be returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.Preload">
            <summary>
            Preloads all of the metadata for this data source.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.Reset">
            <summary>
            Resets the metadata cache, clearing out all cached metadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.TryGetStoredProcedure(System.String,Tortuga.Chain.Metadata.StoredProcedureMetadata@)">
            <summary>
            Tries to get the stored procedure's metadata.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="storedProcedure">The stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.TryGetTableFunction(System.String,Tortuga.Chain.Metadata.TableFunctionMetadata@)">
            <summary>
            Tries to get the metadata for a table function.
            </summary>
            <param name="tableFunctionName">Name of the table function.</param>
            <param name="tableFunction">The table function.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.TryGetTableOrView(System.String,Tortuga.Chain.Metadata.TableOrViewMetadata@)">
            <summary>
            Tries to get the metadata for a table or view.
            </summary>
            <param name="tableName">Name of the table or view.</param>
            <param name="tableOrView">The table or view.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IDatabaseMetadataCache.TryGetUserDefinedTableType(System.String,Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata@)">
            <summary>
            Try to get the metadata for a user defined type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="userDefinedTableType">Type of the user defined table type.</param>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IDatabaseMetadataCache.MaxParameters">
            <summary>
            Gets the maximum number of parameters in a single SQL batch.
            </summary>
            <value>The maximum number of parameters.</value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexColumnMetadata">
            <summary>Class IndexColumnMetadata.</summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadata.#ctor(Tortuga.Chain.Metadata.ColumnMetadata,System.Nullable{System.Boolean},System.Boolean)">
            <summary>Initializes a new instance of the IndexColumnMetadata class.</summary>
            <param name="column">The underlying column details.</param>
            <param name="isDescending">Indicates the column is indexed in descending order.</param>
            <param name="isIncluded">Indicates the column is an unindexed, included column.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadata.Details">
            <summary>
            Gets the underlying column.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadata.IsDescending">
            <summary>
            Gets a value indicating whether this instance is descending.
            </summary>
            <remarks>This should be null for included columns.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadata.IsIncluded">
            <summary>
            Gets a value indicating whether this instance is an included column.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadata.SqlName">
            <summary>
            Gets the name used by the database.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexColumnMetadataCollection">
            <summary>
            Class IndexColumnMetadataCollection.
            Implements the <see cref="T:System.Collections.Generic.IReadOnlyList`1" />
            </summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1" />
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadataCollection.#ctor(System.Collections.Generic.IReadOnlyList{Tortuga.Chain.Metadata.IndexColumnMetadata})">
            <summary>
            Initializes a new instance of the IndexColumnMetadataCollection class that is a read-only wrapper around the specified list.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadataCollection.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <returns>The number of elements in the collection. </returns>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadataCollection.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list.</summary>
            <param name="index">The zero-based index of the element to get. </param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadataCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadataCollection.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>If the column name was not found, this will return null</remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexColumnMetadataCollection`1">
            <summary>Class IndexColumnMetadataCollection.</summary>
            <typeparam name="TDbType">The database column type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadataCollection`1.#ctor(System.Collections.Generic.IEnumerable{Tortuga.Chain.Metadata.IndexColumnMetadata{`0}})">
            <summary>
            Initializes a new instance of the IndexColumnMetadataCollection class that is a read-only wrapper around the specified list.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadataCollection`1.GenericCollection">
            <summary>
            Gets the generic version of this collection.
            </summary>
            <remarks>We can't make this implement IReadOnlyList because it breaks LINQ.</remarks>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadataCollection`1.TryGetColumn(System.String)">
            <summary>
            Returns the column associated with the column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <remarks>If the column name was not found, this will return null</remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexColumnMetadata`1">
            <summary>Class IndexColumnMetadata.
            Implements the <see cref="T:Tortuga.Chain.Metadata.IndexColumnMetadata"/></summary>
            <typeparam name="TDbType">The type of the t database type.</typeparam>
            <seealso cref="T:Tortuga.Chain.Metadata.IndexColumnMetadata" />
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexColumnMetadata`1.#ctor(Tortuga.Chain.Metadata.ColumnMetadata{`0},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the IndexColumnMetadata class.
            </summary>
            <param name="column">The underlying column details.</param>
            <param name="isDescending">Indicates the column is indexed in descending order.</param>
            <param name="isIncluded">Indicates the column is an unindexed, included column.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexColumnMetadata`1.Details">
            <summary>
            Gets the underlying column.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexMetadata">
            <summary>
            Metadata for an index.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexMetadata.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Tortuga.Chain.Metadata.IndexColumnMetadataCollection,System.Nullable{System.Int64},System.Nullable{System.Int64},Tortuga.Chain.Metadata.IndexType)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.IndexMetadata`2"/> class.</summary>
            <param name="tableName">Name of the table (or view).</param>
            <param name="name">The name.</param>
            <param name="isPrimaryKey">if set to <c>true</c> is a primary key.</param>
            <param name="isUnique">if set to <c>true</c> is a unique index.</param>
            <param name="isUniqueConstraint">if set to <c>true</c> is a unique constraint.</param>
            <param name="columns">The columns.</param>
            <param name="indexSizeKB">Approximate index size in KB</param>
            <param name="rowCount">Approximate row count</param>
            <param name="indexType">Type of the index.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.IndexSizeKB">
            <summary>
            Gets the approximate index size in kilobytes.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.IndexType">
            <summary>Gets the type of the index.</summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.IsPrimaryKey">
            <summary>
            Gets a value indicating whether this index is a primary key.
            </summary>
            <value>
              <c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.IsUnique">
            <summary>
            Gets a value indicating whether this is a unique index.
            </summary>
            <value>
              <c>true</c> if this instance is unique; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.IsUniqueConstraint">
            <summary>
            Gets a value indicating whether this is a unique constraint.
            </summary>
            <value>
              <c>true</c> if this instance is unique; otherwise, <c>false</c>.
            </value>
            <remarks>In some database, a unique index is not necessary a unique constraint.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.Name">
            <summary>
            Gets the name of the index.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.RowCount">
            <summary>
            Gets the approximate row count.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata.TableName">
            <summary>
            Gets the name of the table (or view) the index applies to.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexMetadataCollection">
            <summary>
            Class IndexMetadataCollection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexMetadataCollection.#ctor(System.Collections.Generic.IReadOnlyList{Tortuga.Chain.Metadata.IndexMetadata})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.IndexMetadataCollection"/> class.</summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadataCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadataCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Metadata.IndexMetadata"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.Metadata.IndexMetadata"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexMetadataCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexMetadataCollection`2">
             <summary>Class IndexMetadataCollection.
            </summary>
             <typeparam name="TName">The type of the name.</typeparam>
             <typeparam name="TDbType">The database column type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexMetadataCollection`2.#ctor(System.Collections.Generic.IList{Tortuga.Chain.Metadata.IndexMetadata{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.IndexMetadataCollection`2"/> class.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexMetadata`2">
            <summary>
            Metadata for an index.
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <typeparam name="TDbType">The database column type.</typeparam>
            <seealso cref="T:Tortuga.Chain.Metadata.IndexMetadata" />
        </member>
        <member name="M:Tortuga.Chain.Metadata.IndexMetadata`2.#ctor(`0,System.String,System.Boolean,System.Boolean,System.Boolean,Tortuga.Chain.Metadata.IndexColumnMetadataCollection{`1},System.Nullable{System.Int64},System.Nullable{System.Int64},Tortuga.Chain.Metadata.IndexType)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.IndexMetadata`2"/> class.</summary>
            <param name="tableName">Name of the table (or view).</param>
            <param name="name">The name.</param>
            <param name="isPrimaryKey">if set to <c>true</c> is a primary key.</param>
            <param name="isUnique">if set to <c>true</c> is a unique index.</param>
            <param name="isUniqueConstraint">if set to <c>true</c> is a unique constraint.</param>
            <param name="columns">The columns.</param>
            <param name="indexSizeKB">Approximate index size in KB</param>
            <param name="rowCount">Approximate row count</param>
            <param name="indexType">Type of the index.</param>
            <exception cref="T:System.ArgumentNullException">columns</exception>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata`2.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.IndexMetadata`2.TableName">
            <summary>
            Gets the name of the table (or view) the index applies to.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.IndexType">
            <summary>
            Enum IndexType
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Unknown">
            <summary>
            Unknown index type.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.BTree">
            <summary>
            B-Tree Index
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Hash">
            <summary>
            Hash
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Gist">
            <summary>
            Generalized Inverted Search Tree (GiST)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Gin">
            <summary>
            Generalized Inverted Index (GIN)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Spgist">
            <summary>
            Space partitioned GiST (SP-GiST)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Brin">
            <summary>
            Block Range Indexes (BRIN)
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.RTree">
            <summary>
            R-Tree Index
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.FullText">
            <summary>
            Full Text Index
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Heap">
            <summary>
            Heap
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Clustered">
            <summary>
            Clustered
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Nonclustered">
            <summary>
            Nonclustered
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.Spatial">
            <summary>
            Spatial
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.ClusteredColumnstoreIndex">
            <summary>
            Clustered columnstore index
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.NonclusteredColumnstoreIndex">
            <summary>
            Nonclustered columnstore index
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.IndexType.NonclusteredHashIndex">
            <summary>
            Nonclustered hash index
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails">
            <summary>
            This interface is used to allow SqlBuilder to be used with stored procs, TVFs, and other non-table objects.
            </summary>
            <seealso cref="T:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails" />
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.ClrName">
            <summary>
            Gets the name of the color.
            </summary>
            <value>The name of the color.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.FullTypeName">
            <summary>
            Gets or sets the full name of the type including max length, precision, and/or scale.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is identity.
            </summary>
            <value><c>true</c> if this instance is identity; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.QuotedSqlName">
            <summary>
            Gets the name of the quoted SQL.
            </summary>
            <value>The name of the quoted SQL.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.SqlName">
            <summary>
            Gets the name of the SQL.
            </summary>
            <value>The name of the SQL.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.SqlVariableName">
            <summary>
            Gets the name of the SQL variable.
            </summary>
            <value>The name of the SQL variable.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails`1">
            <summary>
            This interface is used to allow SqlBuilder to be used with stored procs, TVFs, and other non-table objects.
            </summary>
            <typeparam name="TDbType">The type of the database type.</typeparam>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ISqlBuilderEntryDetails`1.DbType">
            <summary>
            Gets the database specific DbType
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.NameGenerationOptions">
            <summary>
            Language options needed for code generation scenarios.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.CSharp">
            <summary>
            Use C# type names
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.VisualBasic">
            <summary>
            Use Visual Basic type names
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.FSharp">
            <summary>
            Use F# type names
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.AssumeNullable">
            <summary>
            If the column's nullability is unknown, assume that it is nullable.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.NullableReferenceTypes">
            <summary>
            Use the nullable reference types option from C# 8.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.ForceNullable">
            <summary>
            Treat the type as nullable even if the column/parameter isn't nullable.
            </summary>
            <remarks>This is for database generated values such as identity and created date columns</remarks>
        </member>
        <member name="F:Tortuga.Chain.Metadata.NameGenerationOptions.ForceNonNullable">
            <summary>
            Treat the type as non-nullable even if the column/parameter isn't nullable.
            </summary>
            <remarks>This is needed for legacy serializers that don't support nullable primitives.</remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ParameterMetadata">
            <summary>
            Metadata for a stored procedure parameter
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadata.#ctor(System.String,System.String,System.String,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ParameterMetadata`1"/> class.
            </summary>
            <param name="sqlParameterName">Name of the SQL parameter.</param>
            <param name="sqlVariableName">Name of the SQL variable.</param>
            <param name="typeName">Name of the type as known to the database.</param>
            <param name="dbType">Type of the database column as an enum.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="maxLength">The maximum length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="fullTypeName">Full name of the type.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.ClrName">
            <summary>
            Gets the name used by CLR objects.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.DbType">
            <summary>
            Gets the type of the database column as an enum.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.FullTypeName">
            <summary>
            Gets or sets the full name of the type including max length, precision, and/or scale.
            </summary>
            <value>
            The full name of the type.
            </value>
            <remarks>This will be null if the data source doesn't support detailed parameter metadata.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.IsNullable">
            <summary>
            Gets a value indicating whether this instance is nullable.
            </summary>
            <remarks>This will be null if the data source doesn't support detailed parameter metadata.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.MaxLength">
            <summary>
            Gets the maximum length.
            </summary>
            <value>The maximum length.</value>
            <remarks>This will be null if the data source doesn't support detailed parameter metadata or if this value isn't applicable to the data type.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.Precision">
            <summary>
            Gets the precision.
            </summary>
            <value>The precision.</value>
            <remarks>This will be null if the data source doesn't support detailed parameter metadata or if this value isn't applicable to the data type.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
            <remarks>This will be null if the data source doesn't support detailed parameter metadata or if this value isn't applicable to the data type.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.SqlParameterName">
            <summary>
            Gets the name used by the database.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.SqlVariableName">
            <summary>
            Gets the name of the SQL variable.
            </summary>
            <value>The name of the SQL variable.</value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata.TypeName">
            <summary>
            Gets the name of the type as known to the database.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ParameterMetadataCollection">
            <summary>
            Class ParameterMetadataCollection.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadataCollection.#ctor(System.Collections.Generic.IReadOnlyList{Tortuga.Chain.Metadata.ParameterMetadata})">
            <summary>
            Initializes a new instance of the IndexColumnMetadataCollection class that is a read-only wrapper around the specified list.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadataCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadataCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Metadata.ParameterMetadata"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.Metadata.ParameterMetadata"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadataCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadataCollection.TryGetParameter(System.String)">
            <summary>
            Returns the parameter associated with the parameter name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
            <remarks>If the parameter name was not found, this will return null</remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ParameterMetadataCollection`1">
            <summary>
            Class ParameterMetadataCollection.
            </summary>
            <typeparam name="TDbType">The type of the t database type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadataCollection`1.#ctor(System.String,System.Collections.Generic.IList{Tortuga.Chain.Metadata.ParameterMetadata{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ParameterMetadataCollection`1" /> class.
            </summary>
            <param name="name">The name of the parent object.</param>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadataCollection`1.GenericCollection">
            <summary>
            Gets the generic version of this collection.
            </summary>
            <value>The generic collection.</value>
            <remarks>This is used in generic repository scenarios</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadataCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Metadata.ParameterMetadata`1" /> with the specified name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>ParameterMetadata&lt;TDbType&gt;.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadataCollection`1.TryGetParameter(System.String)">
            <summary>
            Returns the parameter associated with the parameter name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
            <remarks>If the parameter name was not found, this will return null</remarks>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ParameterMetadata`1">
            <summary>
            Metadata for a stored procedure parameter
            </summary>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ParameterMetadata`1.#ctor(System.String,System.String,System.String,System.Nullable{`0},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ParameterMetadata`1"/> class.
            </summary>
            <param name="sqlParameterName">Name of the SQL parameter.</param>
            <param name="sqlVariableName">Name of the SQL variable.</param>
            <param name="typeName">Name of the type as known to the database.</param>
            <param name="dbType">Type of the database column as an enum.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="maxLength">The maximum length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="fullTypeName">Full name of the type.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ParameterMetadata`1.DbType">
            <summary>
            Gets the type of the database column as an enum.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ScalarFunctionMetadata">
            <summary>
            Class TableFunctionMetadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ScalarFunctionMetadata.#ctor(System.String,Tortuga.Chain.Metadata.ParameterMetadataCollection,System.String,System.Object,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ScalarFunctionMetadata"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <param name="typeName">Name of the type.</param>
            <param name="dbType">Type of the database.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="maxLength">The maximum length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="fullTypeName">Full name of the type.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.DbType">
            <summary>
            Gets the type used by the database.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.FullTypeName">
            <summary>
            Gets or sets the full name of the type including max length, precision, and/or scale.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.IsNullable">
            <summary>
            Gets or sets a value indicating whether this column is nullable.
            </summary>
            <value>
            <c>true</c> if this column is nullable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>
            The precision.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2">
            <summary>
            Metadata for a database table value function.
            </summary>
            <typeparam name="TName">The type used to represent database object names.</typeparam>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2.#ctor(`0,Tortuga.Chain.Metadata.ParameterMetadataCollection{`1},System.String,System.Nullable{`1},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2"/> class.
            </summary>
            <param name="name">The name of the scalar function.</param>
            <param name="parameters">The parameters.</param>
            <param name="typeName">Name of the return type.</param>
            <param name="dbType">Return type.</param>
            <param name="isNullable">if set to <c>true</c> if the return type is nullable.</param>
            <param name="maxLength">The maximum length of the return value.</param>
            <param name="precision">The precision of the return value.</param>
            <param name="scale">The scale of the return value.</param>
            <param name="fullTypeName">Full name of the return type.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2.DbType">
            <summary>
            Gets the return type used by the database.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="M:Tortuga.Chain.Metadata.ScalarFunctionMetadata`2.CreateSqlBuilder(System.Boolean)">
            <summary>
            Creates a SQL builder.
            </summary>
            <param name="strictMode">if set to <c>true</c> [strict mode].</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.StoredProcedureMetadata">
            <summary>
            Class StoredProcedureMetadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.StoredProcedureMetadata.#ctor(System.String,Tortuga.Chain.Metadata.ParameterMetadataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.StoredProcedureMetadata" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentException">name</exception>
            <exception cref="T:System.ArgumentNullException">parameters</exception>
        </member>
        <member name="P:Tortuga.Chain.Metadata.StoredProcedureMetadata.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.StoredProcedureMetadata.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.StoredProcedureMetadata`2">
            <summary>
            Class StoredProcedureMetadata.
            </summary>
            <typeparam name="TName">The type used to represent database object names.</typeparam>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.StoredProcedureMetadata`2.#ctor(`0,Tortuga.Chain.Metadata.ParameterMetadataCollection{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.StoredProcedureMetadata`2" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.StoredProcedureMetadata`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.StoredProcedureMetadata`2.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="M:Tortuga.Chain.Metadata.StoredProcedureMetadata`2.CreateSqlBuilder(System.Boolean)">
            <summary>
            Creates a SQL builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.TableFunctionMetadata">
            <summary>
            Class TableFunctionMetadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableFunctionMetadata.#ctor(System.String,Tortuga.Chain.Metadata.ParameterMetadataCollection,Tortuga.Chain.Metadata.ColumnMetadataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.TableFunctionMetadata"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <param name="columns">The columns.</param>
            <exception cref="T:System.ArgumentException">name</exception>
            <exception cref="T:System.ArgumentNullException">
            parameters
            or
            columns
            </exception>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata.NullableColumns">
            <summary>
            Gets the columns known to be nullable.
            </summary>
            <value>
            The nullable columns.
            </value>
            <remarks>This is used to improve the performance of materializers by avoiding is null checks.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.TableFunctionMetadata`2">
            <summary>
            Metadata for a database table value function.
            </summary>
            <typeparam name="TName">The type used to represent database object names.</typeparam>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableFunctionMetadata`2.#ctor(`0,Tortuga.Chain.Metadata.ParameterMetadataCollection{`1},Tortuga.Chain.Metadata.ColumnMetadataCollection{`1})">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.TableFunctionMetadata`2"/> class.</summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata`2.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableFunctionMetadata`2.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableFunctionMetadata`2.CreateSqlBuilder(System.Boolean)">
            <summary>
            Creates a SQL builder.
            </summary>
            <param name="strictMode">if set to <c>true</c> [strict mode].</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.TableOrViewMetadata">
            <summary>
            Abstract version of TableOrViewMetadata.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableOrViewMetadata.#ctor(System.String,System.Boolean,Tortuga.Chain.Metadata.ColumnMetadataCollection)">
            <summary>Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.TableOrViewMetadata"/> class.</summary>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata.HasPrimaryKey">
            <summary>
            Gets a value indicating whether this table or view has primary key.
            </summary>
            <value>
              <c>true</c> if this instance has a primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata.IsTable">
            <summary>
            Gets a value indicating whether this instance is table or a view.
            </summary>
            <value>
            <c>true</c> if this instance is a table; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata.NonNullableColumns">
            <summary>
            Gets the columns known to be not nullable.
            </summary>
            <value>
            The nullable columns.
            </value>
            <remarks>This is used to improve the performance of materializers by avoiding is null checks.</remarks>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata.PrimaryKeyColumns">
            <summary>
            Gets the columns that make up the primary key.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.TableOrViewMetadata`2">
            <summary>
            Metadata for a database table or view.
            </summary>
            <typeparam name="TName">The type used to represent database object names.</typeparam>
            <typeparam name="TDbType">The variant of DbType used by this data source.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableOrViewMetadata`2.#ctor(Tortuga.Chain.Metadata.DatabaseMetadataCache{`0,`1},`0,System.Boolean,Tortuga.Chain.Metadata.ColumnMetadataCollection{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.TableOrViewMetadata`2"/> class.
            </summary>
            <param name="metadataCache">The metadata cache.</param>
            <param name="name">The name.</param>
            <param name="isTable">if set to <c>true</c> [is table].</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata`2.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TableOrViewMetadata`2.PrimaryKeyColumns">
            <summary>
            Gets the columns that make up the primary key.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableOrViewMetadata`2.CreateSqlBuilder(System.Boolean)">
            <summary>
            Creates the SQL builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableOrViewMetadata`2.GetForeignKeys">
            <summary>
            Gets the indexes for this table or view.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Indexes are not supported by this data source</exception>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TableOrViewMetadata`2.GetIndexes">
            <summary>
            Gets the indexes for this table or view.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Chain.Metadata.TypeRegistration`1">
            <summary>
            This is used to map custom database types to CLR types
            </summary>
            <typeparam name="TDbType">The type of the database type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.TypeRegistration`1.#ctor(System.String,`0,System.Type)">
            <summary>
            Initializes a new instance of the TypeRegistration class.
            </summary>
            <param name="databaseTypeName">Name of the database type.</param>
            <param name="databaseType">Type of the database.</param>
            <param name="clrType">Type of the color.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TypeRegistration`1.ClrType">
            <summary>
            Gets the type of the CLR type.
            </summary>
            <value>
            The type of the CLR type.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TypeRegistration`1.DatabaseType">
            <summary>
            Gets the type of the database column.
            </summary>
            <value>
            The type of the database column.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.TypeRegistration`1.DatabaseTypeName">
            <summary>
            Gets the name of the database column type.
            </summary>
            <value>
            The name of the database column type.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata">
            <summary>
            This represents user defined table types in the database.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata.#ctor(System.String,Tortuga.Chain.Metadata.ColumnMetadataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata`2" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="columns">The columns.</param>
            <exception cref="T:System.ArgumentException">name</exception>
            <exception cref="T:System.ArgumentNullException">columns</exception>
        </member>
        <member name="P:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata`2">
            <summary>
            This class represents user defined table types.
            </summary>
            <typeparam name="TName">The type of the t name.</typeparam>
            <typeparam name="TDbType">The type of the t database type.</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata`2.#ctor(`0,Tortuga.Chain.Metadata.ColumnMetadataCollection{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata`2" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata`2.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Tortuga.Chain.MissingDataException">
            <summary>
            This exception indicates that the expected data was not found.
            </summary>
            <remarks>This can occur when a null or empty result set is returned from the database.</remarks>
        </member>
        <member name="M:Tortuga.Chain.MissingDataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingDataException"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.MissingDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingDataException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Tortuga.Chain.MissingDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingDataException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Tortuga.Chain.MissingDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingDataException"/> class.
            </summary>
            <param name="info">The data necessary to serialize or deserialize an object.</param>
            <param name="context">Description of the source and destination of the specified serialized stream.</param>
        </member>
        <member name="T:Tortuga.Chain.MissingObjectException">
            <summary>
            This exception is thrown when the requested database object (e.g. table, view, etc.) could not be found.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.MissingObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingObjectException"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.MissingObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingObjectException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Tortuga.Chain.MissingObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingObjectException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Tortuga.Chain.MissingObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.MissingObjectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Tortuga.Chain.ObjectDataReader`1">
            <summary>
            Creates a DbDataReader wrapper over a list of objects.
            </summary>
            <typeparam name="TObject"></typeparam>
            <seealso cref="T:System.Data.Common.DbDataReader" />
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.#ctor(Tortuga.Chain.Metadata.UserDefinedTableTypeMetadata,System.Collections.Generic.IEnumerable{`0},Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.ObjectDataReader`1" /> class.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="source">The source.</param>
            <param name="operationType">Type of the operation being performed.</param>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.#ctor(Tortuga.Chain.Metadata.TableOrViewMetadata,System.Collections.Generic.IEnumerable{`0},Tortuga.Chain.AuditRules.OperationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.ObjectDataReader`1" /> class.
            </summary>
            <param name="tableOrView">The table or view.</param>
            <param name="source">The source.</param>
            <param name="operationType">Type of the operation being performed.</param>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>The field count.</value>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.HasRows">
            <summary>
            Gets a value that indicates whether this <see cref="T:System.Data.Common.DbDataReader" /> contains one or more rows.
            </summary>
            <value><c>true</c> if this instance has rows; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.IsClosed">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Data.Common.DbDataReader" /> is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <value>The records affected.</value>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Tortuga.Chain.ObjectDataReader`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.Close">
            <summary>
            Closes the <see cref="T:System.Data.Common.DbDataReader" /> object.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by <paramref name="bufferOffset" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of bytes read.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by <paramref name="bufferOffset" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetDataTypeName(System.Int32)">
            <summary>
            Gets name of the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>A string representing the name of the data type.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetFieldType(System.Int32)">
            <summary>
            Gets the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The data type of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetName(System.Int32)">
            <summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The name of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current row.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> into which to copy the attribute columns.</param>
            <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>true if the specified column is equivalent to <see cref="T:System.DBNull" />; otherwise false.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.NextResult">
            <summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns>true if there are more result sets; otherwise false.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.Read">
            <summary>
            Advances the reader to the next record in a result set.
            </summary>
            <returns>true if there are more rows; otherwise false.</returns>
        </member>
        <member name="M:Tortuga.Chain.ObjectDataReader`1.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by the <see cref="T:System.Data.Common.DbDataReader" /> and optionally releases the unmanaged resources.
            </summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Tortuga.Chain.Row">
            <summary>
            A lightweight row expressed as a dictionary.
            </summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />
        </member>
        <member name="M:Tortuga.Chain.Row.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.Row"/> class.
            </summary>
            <param name="contents">The contents.</param>
        </member>
        <member name="P:Tortuga.Chain.Row.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Row.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Row.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Row.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.Row.ContainsKey(System.String)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
            true if the read-only dictionary contains an element that has the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Row.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.Row.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="T:Tortuga.Chain.RowCollection">
            <summary>
            Collection of row objects
            </summary>
        </member>
        <member name="M:Tortuga.Chain.RowCollection.#ctor(System.Collections.Generic.IList{Tortuga.Chain.Row})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.RowCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Tortuga.Chain.RowOptions">
            <summary>
            Controls what happens when the wrong number of rows are returned.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.RowOptions.None">
            <summary>
            An error will be raised unless exactly one row is returned
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Tortuga.Chain.RowOptions.AllowEmptyResults">
            <summary>
            An error will not be raised if no rows are returned.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Tortuga.Chain.RowOptions.DiscardExtraRows">
            <summary>
            An error will not be raised if extra rows are returned. The extras will be discarded.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Tortuga.Chain.RowOptions.InferConstructor">
            <summary>
            Infer which constructor to use. When this option is chosen, individual properties will not be set.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.SortDirection">
            <summary>
            Used to indicate the sort direction
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SortDirection.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:Tortuga.Chain.SortDirection.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Tortuga.Chain.SortExpression">
            <summary>
            Sort expressions are used for From and FromFunction command builders.
            </summary>
            <remarks>You can implicitly convert strings into sort expressions.</remarks>
        </member>
        <member name="M:Tortuga.Chain.SortExpression.#ctor(System.String,Tortuga.Chain.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SortExpression"/> class.
            </summary>
            <param name="columnName">Name of the column to be sorted by.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Tortuga.Chain.SortExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.SortExpression"/> class.
            </summary>
            <param name="columnName">Name of the column to be sorted by.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Tortuga.Chain.SortExpression.ColumnName">
            <summary>
            Gets the name of the column to be sorted by.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:Tortuga.Chain.SortExpression.Direction">
            <summary>
            Gets a value indicating whether this <see cref="T:Tortuga.Chain.SortExpression"/> is descending.
            </summary>
            <value>
              <c>true</c> if descending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Tortuga.Chain.SortExpression.op_Implicit(System.String)~Tortuga.Chain.SortExpression">
            <summary>
            Perform an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Tortuga.Chain.SortExpression"/> with Ascending as the sort direction.
            </summary>
            <param name="columnName">The columnName</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Tortuga.Chain.Table">
            <summary>
            A light-weight object to hold tabular data
            </summary>
            <remarks>
            This is much faster than a DataTable, but lacks most of its features.
            </remarks>
        </member>
        <member name="M:Tortuga.Chain.Table.#ctor(System.String,System.Data.IDataReader)">
            <summary>
            Creates a new NamedTable from an IDataReader
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Tortuga.Chain.Table.#ctor(System.String,System.Data.Common.DbDataReader)">
            <summary>
            Creates a new NamedTable from an IDataReader
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Tortuga.Chain.Table.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            Creates a new Table from an IDataReader
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">nameof(s - rce), "source is</exception>
            <exception cref="T:System.ArgumentException">No columns were returned - source</exception>
        </member>
        <member name="M:Tortuga.Chain.Table.#ctor(System.Data.IDataReader)">
            <summary>
            Creates a new Table from an IDataReader
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Tortuga.Chain.Table.ColumnNames">
            <summary>
            List of column names in their original order.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Table.ColumnTypeMap">
            <summary>
            List of columns and their types.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.Table.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Tortuga.Chain.Table.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="M:Tortuga.Chain.Table.ToObjects``1">
            <summary>
            Converts the table into an enumeration of objects of the indicated type.
            </summary>
            <typeparam name="T">Desired object type</typeparam>
        </member>
        <member name="M:Tortuga.Chain.Table.ToObjects``1(System.Collections.Generic.IReadOnlyList{System.Type})">
            <summary>
            Converts the table into an enumeration of objects of the indicated type using the indicated constructor.
            </summary>
            <typeparam name="T">Desired object type</typeparam>
            <param name="constructorSignature">The constructor signature.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:Tortuga.Chain.Table.ToObjectsWithEcho_New``1">
            <summary>
            Converts the table into an enumeration of objects of the indicated type.
            </summary>
            <typeparam name="T">Desired object type</typeparam>
        </member>
        <member name="T:Tortuga.Chain.TableSet">
            <summary>
            A set of named tables.
            </summary>
            <remarks>This is much faster than a DataSet, but lacks most of its features.</remarks>
        </member>
        <member name="M:Tortuga.Chain.TableSet.#ctor(System.Data.Common.DbDataReader,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.TableSet"/> class.
            </summary>
            <param name="reader">The data reader used to populate this TableSet.</param>
            <param name="tableNames">Optional list of table names.</param>
        </member>
        <member name="P:Tortuga.Chain.TableSet.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Tortuga.Chain.TableSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Table"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.Table"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Chain.TableSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:Tortuga.Chain.Table"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:Tortuga.Chain.Table"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Chain.TableSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tortuga.Chain.TableSet.TSKeyedCollection.GetKeyForItem(Tortuga.Chain.Table)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:Tortuga.Chain.UnexpectedDataException">
            <summary>
            This exception indicates that unexpected data was returned from the database.
            </summary>
            <remarks>This can occur when more rows or columns than expected were returned.</remarks>
        </member>
        <member name="M:Tortuga.Chain.UnexpectedDataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.UnexpectedDataException"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Chain.UnexpectedDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.UnexpectedDataException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Tortuga.Chain.UnexpectedDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.UnexpectedDataException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Tortuga.Chain.UnexpectedDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Chain.UnexpectedDataException"/> class.
            </summary>
            <param name="info">The data necessary to serialize or deserialize an object.</param>
            <param name="context">Description of the source and destination of the specified serialized stream.</param>
        </member>
        <member name="T:Tortuga.Chain.UpdateOptions">
            <summary>
            Controls what happens when performing a model-based update
            </summary>
        </member>
        <member name="F:Tortuga.Chain.UpdateOptions.None">
            <summary>
            Update all non-primary key columns using the primary key columns for the where clause.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.UpdateOptions.ChangedPropertiesOnly">
            <summary>
            Uses the IPropertyChangeTracking interface to only update changed properties.
            </summary>
            <remarks>If this flag is set and IPropertyChangeTracking.IsChanged is false, an error will occur.</remarks>
        </member>
        <member name="F:Tortuga.Chain.UpdateOptions.UseKeyAttribute">
            <summary>
            Ignore the primary keys on the table and perform the update using the Key attribute on properties to construct the where clause.
            </summary>
            <remarks>This is generally used for heap-style tables, though technically heap tables may have primary, non-clustered keys.</remarks>
        </member>
        <member name="F:Tortuga.Chain.UpdateOptions.ReturnOldValues">
            <summary>
            The return original values instead of the updated values.
            </summary>
            <remarks>This has no effect when using the NonQuery materializer.</remarks>
        </member>
        <member name="F:Tortuga.Chain.UpdateOptions.SoftDelete">
            <summary>
            Perform a soft delete as part of this update operation.
            </summary>
            <remarks>This is meant for internal use only.</remarks>
        </member>
        <member name="F:Tortuga.Chain.UpdateOptions.IgnoreRowsAffected">
            <summary>
            The ignore rows affected count. Without this flag, an error will be thrown if the rows affected by the update operation is not zero.
            </summary>
        </member>
        <member name="T:Tortuga.Chain.UpsertOptions">
            <summary>
            Controls what happens when performing a model-based insert or update
            </summary>
        </member>
        <member name="F:Tortuga.Chain.UpsertOptions.None">
            <summary>
            Update all non-primary key columns using the primary key columns for the where clause.
            </summary>
        </member>
        <member name="F:Tortuga.Chain.UpsertOptions.ChangedPropertiesOnly">
            <summary>
            Uses the IPropertyChangeTracking interface to only update changed properties. This flag has no effect when performing an insert.
            </summary>
            <remarks>If this flag is set and IPropertyChangeTracking.IsChanged is false, an error will occur.</remarks>
        </member>
        <member name="F:Tortuga.Chain.UpsertOptions.UseKeyAttribute">
            <summary>
            Ignore the primary keys on the table and perform the update using the Key attribute on properties to construct the where clause.
            </summary>
            <remarks>This is generally used for heap-style tables, though technically heap tables may have primary, non-clustered keys.</remarks>
        </member>
        <member name="F:Tortuga.Chain.UpsertOptions.IdentityInsert">
            <summary>
            Allows overriding identity/auto-number column
            </summary>
            <remarks>This may require elevated privileges. This is not supported by all databases.</remarks>
        </member>
    </members>
</doc>
